; ModuleID = 'gomodule'
source_filename = "gomodule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.section \22.go_export\22,\22e\22,@progbits"
module asm "\09.ascii \22v3;\\n\22"
module asm "\09.ascii \22package \22"
module asm "\09.ascii \22main\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22pkgpath \22"
module asm "\09.ascii \22main\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22types 2 1\22"
module asm "\09.ascii \22 44\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22type 1 (? <type -3>, ? <type -3>) <type -3>\\n\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22.\22"
module asm "\09.ascii \22sum\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22a\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22b\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22$ret0\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -3>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 <inl:159>\\n\22"
module asm "\09.ascii \22 // sum/sum-variant.go:3\\n var x <type -3> = (a + b) //4\\n var y <type -3> = (x + 2 ) //5\\n { //6\\n  $ret0 = (y - $convert(<type -3>, 2 )) //6\\n  return //6\\n } //0\\n\22"
module asm "\09.ascii \22checksum E3E1BCA8D3ED3BC82606A01124219DB4A117F5A5\\n\22"
module asm "\09.text"

@main..types = constant { i64, [1 x i8*] } zeroinitializer
@go..typelists = internal constant [1 x { i64, [1 x i8*] }*] [{ i64, [1 x i8*] }* @main..types]

define void @__go_init_main(i8* nest nocapture readnone %nest.2) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @runtime.registerTypeDescriptors(i8* nest undef, i64 1, i8* bitcast ([1 x { i64, [1 x i8*] }*]* @go..typelists to i8*)), !dbg !11
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define i32 @main.sum(i8* nest nocapture readnone %nest.0, i32 %a, i32 %b) local_unnamed_addr #1 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !18, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.value(metadata i32 %b, metadata !20, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.value(metadata i32 0, metadata !21, metadata !DIExpression()), !dbg !19
  %add.0 = add i32 %b, %a, !dbg !22
  call void @llvm.dbg.value(metadata i32 %add.0, metadata !24, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.value(metadata i32 %add.0, metadata !25, metadata !DIExpression(DW_OP_plus_uconst, 2, DW_OP_stack_value)), !dbg !19
  call void @llvm.dbg.value(metadata i32 %add.0, metadata !21, metadata !DIExpression()), !dbg !19
  ret i32 %add.0, !dbg !26
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define void @main.main(i8* nest nocapture %nest.1) local_unnamed_addr #1 !dbg !27 {
entry:
  ret void
}

declare void @runtime.registerTypeDescriptors(i8*, i64, i8*) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #1 = { mustprogress nofree norecurse nosync nounwind readnone willreturn "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}

!0 = !{i32 7, !"PIC Level", i32 0}
!1 = !{i32 2, !"Debug Info Version", i32 3}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = distinct !DICompileUnit(language: DW_LANG_Go, file: !4, producer: "llvm-goc", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!4 = !DIFile(filename: "sum/sum-variant.go", directory: "/home/javier/Galapagos/linker/tests")
!5 = distinct !DISubprogram(name: "__go_init_main", scope: null, file: !6, line: 1, type: !7, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !10)
!6 = !DIFile(filename: "sum-variant.go", directory: "sum")
!7 = !DISubroutineType(types: !8)
!8 = !{!9}
!9 = !DIBasicType(name: "void")
!10 = !{}
!11 = !DILocation(line: 1, column: 1, scope: !12)
!12 = !DILexicalBlockFile(scope: !5, file: !13, discriminator: 0)
!13 = !DIFile(filename: "<built-in>", directory: "")
!14 = distinct !DISubprogram(name: "main.sum", scope: null, file: !6, line: 3, type: !15, scopeLine: 3, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !10)
!15 = !DISubroutineType(types: !16)
!16 = !{!17, !17, !17}
!17 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!18 = !DILocalVariable(name: "a", arg: 1, scope: !14, file: !6, line: 3, type: !17)
!19 = !DILocation(line: 0, scope: !14)
!20 = !DILocalVariable(name: "b", arg: 2, scope: !14, file: !6, line: 3, type: !17)
!21 = !DILocalVariable(name: "$ret0", scope: !14, file: !6, line: 3, type: !17)
!22 = !DILocation(line: 4, column: 9, scope: !23)
!23 = distinct !DILexicalBlock(scope: !14, file: !6, line: 3, column: 1)
!24 = !DILocalVariable(name: "x", scope: !23, file: !6, line: 4, type: !17)
!25 = !DILocalVariable(name: "y", scope: !23, file: !6, line: 5, type: !17)
!26 = !DILocation(line: 6, column: 2, scope: !23)
!27 = distinct !DISubprogram(name: "main.main", scope: null, file: !6, line: 9, type: !7, scopeLine: 9, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !10)
