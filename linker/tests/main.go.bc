; ModuleID = 'gomodule'
source_filename = "gomodule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.section \22.go_export\22,\22e\22,@progbits"
module asm "\09.ascii \22v3;\\n\22"
module asm "\09.ascii \22package \22"
module asm "\09.ascii \22main\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22pkgpath \22"
module asm "\09.ascii \22main\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22types 5 1\22"
module asm "\09.ascii \22 43\22"
module asm "\09.ascii \22 17\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 22\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22type 1 (? <type 2>, ? <type -8>) <type -8>\\ntype 2 *<type 3>\\ntype 3 [5 ] <type 4>\\ntype 4 [5 ] <type -8>\\n\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22Chi\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22A\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x1>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 2>\22"
module asm "\09.ascii \22, \22"
module asm "\09.ascii \22i\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -8>\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22checksum B38E11433D2C6495FAE0859EB7A4E9ED18410564\\n\22"
module asm "\09.text"

%functionDescriptor.0 = type { i64 }

@main.Chi..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (i64 (i8*, [5 x [5 x i64]]*, i64)* @main.Chi to i64) }
@main._65_7_65_7uint64..eq..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @main._65_7_65_7uint64..eq to i64) }
@main._65_7uint64..eq..f = local_unnamed_addr constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @main._65_7uint64..eq to i64) }
@main..types = constant { i64, [1 x i8*] } zeroinitializer
@go..typelists = internal constant [1 x { i64, [1 x i8*] }*] [{ i64, [1 x i8*] }* @main..types]

define void @__go_init_main(i8* nest nocapture readnone %nest.4) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @runtime.registerTypeDescriptors(i8* nest undef, i64 1, i8* bitcast ([1 x { i64, [1 x i8*] }*]* @go..typelists to i8*)), !dbg !11
  ret void
}

define i64 @main.Chi(i8* nest nocapture readnone %nest.0, [5 x [5 x i64]]* %A, i64 %i) #0 !dbg !14 {
entry:
  %C = alloca [5 x i64], align 8
  call void @llvm.dbg.value(metadata [5 x [5 x i64]]* %A, metadata !23, metadata !DIExpression()), !dbg !24
  call void @llvm.dbg.value(metadata i64 %i, metadata !25, metadata !DIExpression()), !dbg !24
  call void @llvm.dbg.value(metadata i64 0, metadata !26, metadata !DIExpression()), !dbg !24
  %0 = bitcast [5 x i64]* %C to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0)
  call void @llvm.dbg.declare(metadata [5 x i64]* %C, metadata !27, metadata !DIExpression()), !dbg !29
  call void @llvm.dbg.value(metadata i64 0, metadata !30, metadata !DIExpression()), !dbg !33
  %icmp.14 = icmp eq [5 x [5 x i64]]* %A, null
  %index.0 = getelementptr inbounds [5 x i64], [5 x i64]* %C, i64 0, i64 0
  %index.7 = getelementptr inbounds [5 x i64], [5 x i64]* %C, i64 0, i64 1
  %index.14 = getelementptr inbounds [5 x i64], [5 x i64]* %C, i64 0, i64 2
  %index.21 = getelementptr inbounds [5 x i64], [5 x i64]* %C, i64 0, i64 3
  %index.28 = getelementptr inbounds [5 x i64], [5 x i64]* %C, i64 0, i64 4
  call void @llvm.dbg.value(metadata i64 0, metadata !30, metadata !DIExpression()), !dbg !33
  br label %then.70

then.7:                                           ; preds = %then.70
  call void @runtime.panicmem(i8* nest undef), !dbg !34
  unreachable

else.7:                                           ; preds = %then.70
  %index.2 = getelementptr [5 x [5 x i64]], [5 x [5 x i64]]* %A, i64 0, i64 %y.0103, i64 0, !dbg !35
  %.index.index.ld.2 = load i64, i64* %index.2, align 8, !dbg !35
  %index.4 = getelementptr [5 x [5 x i64]], [5 x [5 x i64]]* %A, i64 0, i64 %y.0103, i64 1, !dbg !36
  %.index.index.ld.0 = load i64, i64* %index.4, align 8, !dbg !36
  %xor.0 = xor i64 %.index.index.ld.0, -1, !dbg !37
  %index.6 = getelementptr [5 x [5 x i64]], [5 x [5 x i64]]* %A, i64 0, i64 %y.0103, i64 2, !dbg !38
  %.index.index.ld.1 = load i64, i64* %index.6, align 8, !dbg !38
  %iand.7 = and i64 %.index.index.ld.1, %xor.0, !dbg !39
  %xor.1 = xor i64 %iand.7, %.index.index.ld.2, !dbg !40
  %xor.2 = xor i64 %.index.index.ld.1, -1, !dbg !41
  %index.13 = getelementptr [5 x [5 x i64]], [5 x [5 x i64]]* %A, i64 0, i64 %y.0103, i64 3, !dbg !42
  %.index.index.ld.4 = load i64, i64* %index.13, align 8, !dbg !42
  %iand.15 = and i64 %.index.index.ld.4, %xor.2, !dbg !43
  %xor.3 = xor i64 %iand.15, %.index.index.ld.0, !dbg !44
  %xor.4 = xor i64 %.index.index.ld.4, -1, !dbg !45
  %index.20 = getelementptr [5 x [5 x i64]], [5 x [5 x i64]]* %A, i64 0, i64 %y.0103, i64 4, !dbg !46
  %.index.index.ld.7 = load i64, i64* %index.20, align 8, !dbg !46
  %iand.23 = and i64 %.index.index.ld.7, %xor.4, !dbg !47
  %xor.5 = xor i64 %iand.23, %.index.index.ld.1, !dbg !48
  %xor.6 = xor i64 %.index.index.ld.7, -1, !dbg !49
  %iand.31 = and i64 %.index.index.ld.2, %xor.6, !dbg !50
  %xor.7 = xor i64 %iand.31, %.index.index.ld.4, !dbg !51
  %xor.8 = xor i64 %.index.index.ld.2, -1, !dbg !52
  %iand.39 = and i64 %.index.index.ld.0, %xor.8, !dbg !53
  %xor.9 = xor i64 %.index.index.ld.7, %iand.39, !dbg !54
  store i64 %xor.1, i64* %index.2, align 8, !dbg !55
  store i64 %xor.3, i64* %index.4, align 8, !dbg !56
  store i64 %xor.5, i64* %index.6, align 8, !dbg !57
  store i64 %xor.7, i64* %index.13, align 8, !dbg !58
  store i64 %xor.9, i64* %index.20, align 8, !dbg !59
  %add.0 = add nuw nsw i64 %y.0103, 1, !dbg !60
  call void @llvm.dbg.value(metadata i64 %add.0, metadata !30, metadata !DIExpression()), !dbg !33
  %exitcond.not = icmp eq i64 %add.0, 5, !dbg !61
  br i1 %exitcond.not, label %else.70, label %then.70

then.70:                                          ; preds = %entry, %else.7
  %y.0103 = phi i64 [ 0, %entry ], [ %add.0, %else.7 ]
  call void @llvm.dbg.value(metadata i64 %y.0103, metadata !30, metadata !DIExpression()), !dbg !33
  br i1 %icmp.14, label %then.7, label %else.7, !make.implicit !10

else.70:                                          ; preds = %else.7
  store i64 %xor.1, i64* %index.0, align 8, !dbg !62
  store i64 %xor.3, i64* %index.7, align 8, !dbg !63
  store i64 %xor.5, i64* %index.14, align 8, !dbg !64
  store i64 %xor.7, i64* %index.21, align 8, !dbg !65
  store i64 %xor.9, i64* %index.28, align 8, !dbg !66
  %1 = icmp ult i64 %i, 5, !dbg !67
  br i1 %1, label %fallthrough.71, label %else.71

fallthrough.71:                                   ; preds = %else.70
  %index.50 = getelementptr [5 x i64], [5 x i64]* %C, i64 0, i64 %i, !dbg !67
  %C.index.ld.5 = load i64, i64* %index.50, align 8, !dbg !67
  call void @llvm.dbg.value(metadata i64 %C.index.ld.5, metadata !26, metadata !DIExpression()), !dbg !24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0), !dbg !68
  ret i64 %C.index.ld.5, !dbg !68

else.71:                                          ; preds = %else.70
  call void @runtime.goPanicIndexU(i8* nest undef, i64 %i, i64 5), !dbg !67
  unreachable
}

; Function Attrs: noreturn
declare void @runtime.panicmem(i8*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @runtime.goPanicIndexU(i8*, i64, i64) local_unnamed_addr #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

define void @main.main(i8* nest nocapture readnone %nest.1) local_unnamed_addr #0 !dbg !69 {
entry:
  %A = alloca [5 x [5 x i64]], align 8, !go_addrtaken !10
  %0 = bitcast [5 x [5 x i64]]* %A to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %0)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(200) %0, i8 0, i64 200, i1 false)
  call void @llvm.dbg.declare(metadata [5 x [5 x i64]]* %A, metadata !70, metadata !DIExpression()), !dbg !72
  %call.0 = call i64 @main.Chi(i8* nest undef, [5 x [5 x i64]]* nonnull %A, i64 0), !dbg !73
  call void @runtime.printlock(i8* nest undef), !dbg !74
  call void @runtime.printuint(i8* nest undef, i64 %call.0), !dbg !74
  call void @runtime.printnl(i8* nest undef), !dbg !74
  call void @runtime.printunlock(i8* nest undef), !dbg !74
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %0)
  ret void
}

declare void @runtime.printlock(i8*) local_unnamed_addr #0

declare void @runtime.printuint(i8*, i64) local_unnamed_addr #0

declare void @runtime.printnl(i8*) local_unnamed_addr #0

declare void @runtime.printunlock(i8*) local_unnamed_addr #0

; Function Attrs: nofree readonly
define i8 @main._65_7_65_7uint64..eq(i8* nest nocapture readnone %nest.2, i8* readonly %key1, i8* readonly %key2) #4 !dbg !75 {
entry:
  call void @llvm.dbg.value(metadata i8* %key1, metadata !80, metadata !DIExpression()), !dbg !81
  call void @llvm.dbg.value(metadata i8* %key2, metadata !82, metadata !DIExpression()), !dbg !81
  call void @llvm.dbg.value(metadata i8 0, metadata !83, metadata !DIExpression()), !dbg !81
  %call.1 = call i8 @runtime.memequal(i8* nest undef, i8* %key1, i8* %key2, i64 200), !dbg !84
  call void @llvm.dbg.value(metadata i8 %call.1, metadata !83, metadata !DIExpression()), !dbg !81
  ret i8 %call.1, !dbg !84
}

; Function Attrs: argmemonly nofree readonly
declare i8 @runtime.memequal(i8*, i8*, i8*, i64) local_unnamed_addr #5

; Function Attrs: nofree readonly
define i8 @main._65_7uint64..eq(i8* nest nocapture readnone %nest.3, i8* readonly %key1, i8* readonly %key2) #4 !dbg !85 {
entry:
  call void @llvm.dbg.value(metadata i8* %key1, metadata !86, metadata !DIExpression()), !dbg !87
  call void @llvm.dbg.value(metadata i8* %key2, metadata !88, metadata !DIExpression()), !dbg !87
  call void @llvm.dbg.value(metadata i8 0, metadata !89, metadata !DIExpression()), !dbg !87
  %call.2 = call i8 @runtime.memequal(i8* nest undef, i8* %key1, i8* %key2, i64 40), !dbg !90
  call void @llvm.dbg.value(metadata i8 %call.2, metadata !89, metadata !DIExpression()), !dbg !87
  ret i8 %call.2, !dbg !90
}

declare void @runtime.registerTypeDescriptors(i8*, i64, i8*) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #3

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #1 = { noreturn "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { nofree readonly "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #5 = { argmemonly nofree readonly "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #6 = { argmemonly nofree nounwind willreturn writeonly }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}

!0 = !{i32 7, !"PIC Level", i32 0}
!1 = !{i32 2, !"Debug Info Version", i32 3}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = distinct !DICompileUnit(language: DW_LANG_Go, file: !4, producer: "llvm-goc", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!4 = !DIFile(filename: "chi/chi.go", directory: "/home/javier/Galapagos/linker/tests")
!5 = distinct !DISubprogram(name: "__go_init_main", scope: null, file: !6, line: 1, type: !7, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !10)
!6 = !DIFile(filename: "chi.go", directory: "chi")
!7 = !DISubroutineType(types: !8)
!8 = !{!9}
!9 = !DIBasicType(name: "void")
!10 = !{}
!11 = !DILocation(line: 1, column: 1, scope: !12)
!12 = !DILexicalBlockFile(scope: !5, file: !13, discriminator: 0)
!13 = !DIFile(filename: "<built-in>", directory: "")
!14 = distinct !DISubprogram(name: "main.Chi", scope: null, file: !6, line: 3, type: !15, scopeLine: 3, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !10)
!15 = !DISubroutineType(types: !16)
!16 = !{!17, !18, !17}
!17 = !DIBasicType(name: "uint64", size: 64, encoding: DW_ATE_unsigned)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 1600, align: 8, elements: !21)
!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 320, align: 8, elements: !21)
!21 = !{!22}
!22 = !DISubrange(count: 5, lowerBound: 0)
!23 = !DILocalVariable(name: "A", arg: 1, scope: !14, file: !6, line: 3, type: !18)
!24 = !DILocation(line: 0, scope: !14)
!25 = !DILocalVariable(name: "i", arg: 2, scope: !14, file: !6, line: 3, type: !17)
!26 = !DILocalVariable(name: "$ret0", scope: !14, file: !6, line: 3, type: !17)
!27 = !DILocalVariable(name: "C", scope: !28, file: !6, line: 4, type: !20)
!28 = distinct !DILexicalBlock(scope: !14, file: !6, line: 3, column: 1)
!29 = !DILocation(line: 4, column: 6, scope: !14)
!30 = !DILocalVariable(name: "y", scope: !31, file: !6, line: 6, type: !32)
!31 = distinct !DILexicalBlock(scope: !28, file: !6, line: 6, column: 2)
!32 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!33 = !DILocation(line: 0, scope: !28)
!34 = !DILocation(line: 7, column: 11, scope: !31)
!35 = !DILocation(line: 7, column: 14, scope: !31)
!36 = !DILocation(line: 7, column: 26, scope: !31)
!37 = !DILocation(line: 7, column: 21, scope: !31)
!38 = !DILocation(line: 7, column: 36, scope: !31)
!39 = !DILocation(line: 7, column: 30, scope: !31)
!40 = !DILocation(line: 7, column: 18, scope: !31)
!41 = !DILocation(line: 8, column: 21, scope: !31)
!42 = !DILocation(line: 8, column: 36, scope: !31)
!43 = !DILocation(line: 8, column: 30, scope: !31)
!44 = !DILocation(line: 8, column: 18, scope: !31)
!45 = !DILocation(line: 9, column: 21, scope: !31)
!46 = !DILocation(line: 9, column: 36, scope: !31)
!47 = !DILocation(line: 9, column: 30, scope: !31)
!48 = !DILocation(line: 9, column: 18, scope: !31)
!49 = !DILocation(line: 10, column: 21, scope: !31)
!50 = !DILocation(line: 10, column: 30, scope: !31)
!51 = !DILocation(line: 10, column: 18, scope: !31)
!52 = !DILocation(line: 11, column: 21, scope: !31)
!53 = !DILocation(line: 11, column: 30, scope: !31)
!54 = !DILocation(line: 11, column: 18, scope: !31)
!55 = !DILocation(line: 13, column: 11, scope: !31)
!56 = !DILocation(line: 14, column: 11, scope: !31)
!57 = !DILocation(line: 15, column: 11, scope: !31)
!58 = !DILocation(line: 16, column: 11, scope: !31)
!59 = !DILocation(line: 17, column: 11, scope: !31)
!60 = !DILocation(line: 6, column: 21, scope: !31)
!61 = !DILocation(line: 6, column: 16, scope: !31)
!62 = !DILocation(line: 7, column: 8, scope: !31)
!63 = !DILocation(line: 8, column: 8, scope: !31)
!64 = !DILocation(line: 9, column: 8, scope: !31)
!65 = !DILocation(line: 10, column: 8, scope: !31)
!66 = !DILocation(line: 11, column: 8, scope: !31)
!67 = !DILocation(line: 20, column: 10, scope: !28)
!68 = !DILocation(line: 20, column: 2, scope: !28)
!69 = distinct !DISubprogram(name: "main.main", scope: null, file: !6, line: 23, type: !7, scopeLine: 23, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !10)
!70 = !DILocalVariable(name: "A", scope: !71, file: !6, line: 24, type: !19)
!71 = distinct !DILexicalBlock(scope: !69, file: !6, line: 23, column: 1)
!72 = !DILocation(line: 24, column: 6, scope: !69)
!73 = !DILocation(line: 25, column: 10, scope: !71)
!74 = !DILocation(line: 25, column: 2, scope: !71)
!75 = distinct !DISubprogram(name: "main._65_7_65_7uint64..eq", scope: null, file: !13, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !10)
!76 = !DISubroutineType(types: !77)
!77 = !{!78, !79, !79}
!78 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_unsigned)
!79 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!80 = !DILocalVariable(name: "key1", arg: 1, scope: !75, file: !13, line: 1, type: !79)
!81 = !DILocation(line: 0, scope: !75)
!82 = !DILocalVariable(name: "key2", arg: 2, scope: !75, file: !13, line: 1, type: !79)
!83 = !DILocalVariable(name: "$ret1", scope: !75, file: !13, line: 1, type: !78)
!84 = !DILocation(line: 1, column: 1, scope: !75)
!85 = distinct !DISubprogram(name: "main._65_7uint64..eq", scope: null, file: !13, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !10)
!86 = !DILocalVariable(name: "key1", arg: 1, scope: !85, file: !13, line: 1, type: !79)
!87 = !DILocation(line: 0, scope: !85)
!88 = !DILocalVariable(name: "key2", arg: 2, scope: !85, file: !13, line: 1, type: !79)
!89 = !DILocalVariable(name: "$ret2", scope: !85, file: !13, line: 1, type: !78)
!90 = !DILocation(line: 1, column: 1, scope: !85)
