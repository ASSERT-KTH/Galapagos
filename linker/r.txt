-L/home/jacarte/linker/deps/llvm-Release-build/lib
-lLLVMWindowsManifest -lLLVMXRay -lLLVMLibDriver -lLLVMDlltoolDriver -lLLVMCoverage -lLLVMLineEditor -lLLVMXCoreDisassembler -lLLVMXCoreCodeGen -lLLVMXCoreDesc -lLLVMXCoreInfo -lLLVMX86TargetMCA -lLLVMX86Disassembler -lLLVMX86AsmParser -lLLVMX86CodeGen -lLLVMX86Desc -lLLVMX86Info -lLLVMWebAssemblyDisassembler -lLLVMWebAssemblyAsmParser -lLLVMWebAssemblyCodeGen -lLLVMWebAssemblyUtils -lLLVMWebAssemblyDesc -lLLVMWebAssemblyInfo -lLLVMVEDisassembler -lLLVMVEAsmParser -lLLVMVECodeGen -lLLVMVEDesc -lLLVMVEInfo -lLLVMSystemZDisassembler -lLLVMSystemZAsmParser -lLLVMSystemZCodeGen -lLLVMSystemZDesc -lLLVMSystemZInfo -lLLVMSparcDisassembler -lLLVMSparcAsmParser -lLLVMSparcCodeGen -lLLVMSparcDesc -lLLVMSparcInfo -lLLVMRISCVTargetMCA -lLLVMRISCVDisassembler -lLLVMRISCVAsmParser -lLLVMRISCVCodeGen -lLLVMRISCVDesc -lLLVMRISCVInfo -lLLVMPowerPCDisassembler -lLLVMPowerPCAsmParser -lLLVMPowerPCCodeGen -lLLVMPowerPCDesc -lLLVMPowerPCInfo -lLLVMNVPTXCodeGen -lLLVMNVPTXDesc -lLLVMNVPTXInfo -lLLVMMSP430Disassembler -lLLVMMSP430AsmParser -lLLVMMSP430CodeGen -lLLVMMSP430Desc -lLLVMMSP430Info -lLLVMMipsDisassembler -lLLVMMipsAsmParser -lLLVMMipsCodeGen -lLLVMMipsDesc -lLLVMMipsInfo -lLLVMLoongArchDisassembler -lLLVMLoongArchAsmParser -lLLVMLoongArchCodeGen -lLLVMLoongArchDesc -lLLVMLoongArchInfo -lLLVMLanaiDisassembler -lLLVMLanaiCodeGen -lLLVMLanaiAsmParser -lLLVMLanaiDesc -lLLVMLanaiInfo -lLLVMHexagonDisassembler -lLLVMHexagonCodeGen -lLLVMHexagonAsmParser -lLLVMHexagonDesc -lLLVMHexagonInfo -lLLVMBPFDisassembler -lLLVMBPFAsmParser -lLLVMBPFCodeGen -lLLVMBPFDesc -lLLVMBPFInfo -lLLVMAVRDisassembler -lLLVMAVRAsmParser -lLLVMAVRCodeGen -lLLVMAVRDesc -lLLVMAVRInfo -lLLVMARMDisassembler -lLLVMARMAsmParser -lLLVMARMCodeGen -lLLVMARMDesc -lLLVMARMUtils -lLLVMARMInfo -lLLVMAMDGPUTargetMCA -lLLVMAMDGPUDisassembler -lLLVMAMDGPUAsmParser -lLLVMAMDGPUCodeGen -lLLVMAMDGPUDesc -lLLVMAMDGPUUtils -lLLVMAMDGPUInfo -lLLVMAArch64Disassembler -lLLVMAArch64AsmParser -lLLVMAArch64CodeGen -lLLVMAArch64Desc -lLLVMAArch64Utils -lLLVMAArch64Info -lLLVMOrcJIT -lLLVMWindowsDriver -lLLVMMCJIT -lLLVMJITLink -lLLVMInterpreter -lLLVMExecutionEngine -lLLVMRuntimeDyld -lLLVMOrcTargetProcess -lLLVMOrcShared -lLLVMDWP -lLLVMDebugInfoLogicalView -lLLVMDebugInfoGSYM -lLLVMOption -lLLVMObjectYAML -lLLVMObjCopy -lLLVMMCA -lLLVMMCDisassembler -lLLVMLTO -lLLVMPasses -lLLVMCFGuard -lLLVMCoroutines -lLLVMipo -lLLVMVectorize -lLLVMLinker -lLLVMInstrumentation -lLLVMFrontendOpenMP -lLLVMFrontendOpenACC -lLLVMFrontendHLSL -lLLVMExtensions -lLLVMDWARFLinkerParallel -lLLVMDWARFLinker -lLLVMGlobalISel -lLLVMMIRParser -lLLVMAsmPrinter -lLLVMSelectionDAG -lLLVMCodeGen -lLLVMTarget -lLLVMObjCARCOpts -lLLVMCodeGenTypes -lLLVMIRPrinter -lLLVMInterfaceStub -lLLVMFileCheck -lLLVMFuzzMutate -lLLVMScalarOpts -lLLVMInstCombine -lLLVMAggressiveInstCombine -lLLVMTransformUtils -lLLVMBitWriter -lLLVMAnalysis -lLLVMProfileData -lLLVMSymbolize -lLLVMDebugInfoBTF -lLLVMDebugInfoPDB -lLLVMDebugInfoMSF -lLLVMDebugInfoDWARF -lLLVMObject -lLLVMTextAPI -lLLVMMCParser -lLLVMIRReader -lLLVMAsmParser -lLLVMMC -lLLVMDebugInfoCodeView -lLLVMBitReader -lLLVMFuzzerCLI -lLLVMCore -lLLVMRemarks -lLLVMBitstreamReader -lLLVMBinaryFormat -lLLVMTargetParser -lLLVMTableGen -lLLVMSupport -lLLVMDemangle -lrt -ldl -lm -lz -ltinfo -lxml2
usage: llvm-config <OPTION>... [<COMPONENT>...]

Get various configuration information needed to compile programs which use
LLVM.  Typically called from 'configure' scripts.  Examples:
  llvm-config --cxxflags
  llvm-config --ldflags
  llvm-config --libs engine bcreader scalaropts

Options:
  --assertion-mode  Print assertion mode of LLVM tree (ON or OFF).
  --bindir          Directory containing LLVM executables.
  --build-mode      Print build mode of LLVM tree (e.g. Debug or Release).
  --build-system    Print the build system used to build LLVM (e.g. `cmake` or `gn`).
  --cflags          C compiler flags for files that include LLVM headers.
  --cmakedir        Directory containing LLVM CMake modules.
  --components      List of all possible components.
  --cppflags        C preprocessor flags for files that include LLVM headers.
  --cxxflags        C++ compiler flags for files that include LLVM headers.
  --has-rtti        Print whether or not LLVM was built with rtti (YES or NO).
  --help            Print a summary of llvm-config arguments.
  --host-target     Target triple used to configure LLVM.
  --ignore-libllvm  Ignore libLLVM and link component libraries instead.
  --includedir      Directory containing LLVM headers.
  --ldflags         Print Linker flags.
  --libdir          Directory containing LLVM libraries.
  --libfiles        Fully qualified library filenames for makefile depends.
  --libnames        Bare library names for in-tree builds.
  --libs            Libraries needed to link against LLVM components.
  --link-shared     Link the components as shared libraries.
  --link-static     Link the component libraries statically.
  --obj-root        Print the object root used to build LLVM.
  --prefix          Print the installation prefix.
  --shared-mode     Print how the provided components can be collectively linked (`shared` or `static`).
  --system-libs     System Libraries needed to link against LLVM components.
  --targets-built   List of all targets currently built.
  --version         Print LLVM version.
Typical components:
  all               All LLVM libraries (default).
  engine            Either a native JIT or a bitcode interpreter.
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jacarte/linker/build
Consolidate compiler generated dependencies of target linker
[ 20%] Building CXX object CMakeFiles/linker.dir/lib/go/go.cpp.o
[ 40%] Building CXX object CMakeFiles/linker.dir/tools/linker.cpp.o
[ 60%] Linking CXX executable linker
[100%] Built target linker
Parsing original bitcode main.c.bc
Parsing error original: 
Finding Chi in the original
	main
	printf
	Chi
	Function found !
; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @Chi(ptr noundef %0, i64 noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  %5 = alloca [5 x i64], align 16
  %6 = alloca i64, align 8
  store ptr %0, ptr %3, align 8
  store i64 %1, ptr %4, align 8
  store i64 0, ptr %6, align 8
  br label %7

7:                                                ; preds = %136, %2
  %8 = load i64, ptr %6, align 8
  %9 = icmp ult i64 %8, 5
  br i1 %9, label %10, label %139

10:                                               ; preds = %7
  %11 = load ptr, ptr %3, align 8
  %12 = load i64, ptr %6, align 8
  %13 = getelementptr inbounds [5 x i64], ptr %11, i64 %12
  %14 = getelementptr inbounds [5 x i64], ptr %13, i64 0, i64 0
  %15 = load i64, ptr %14, align 8
  %16 = load ptr, ptr %3, align 8
  %17 = load i64, ptr %6, align 8
  %18 = getelementptr inbounds [5 x i64], ptr %16, i64 %17
  %19 = getelementptr inbounds [5 x i64], ptr %18, i64 0, i64 1
  %20 = load i64, ptr %19, align 8
  %21 = xor i64 %20, -1
  %22 = load ptr, ptr %3, align 8
  %23 = load i64, ptr %6, align 8
  %24 = getelementptr inbounds [5 x i64], ptr %22, i64 %23
  %25 = getelementptr inbounds [5 x i64], ptr %24, i64 0, i64 2
  %26 = load i64, ptr %25, align 8
  %27 = and i64 %21, %26
  %28 = xor i64 %15, %27
  %29 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 0
  store i64 %28, ptr %29, align 16
  %30 = load ptr, ptr %3, align 8
  %31 = load i64, ptr %6, align 8
  %32 = getelementptr inbounds [5 x i64], ptr %30, i64 %31
  %33 = getelementptr inbounds [5 x i64], ptr %32, i64 0, i64 1
  %34 = load i64, ptr %33, align 8
  %35 = load ptr, ptr %3, align 8
  %36 = load i64, ptr %6, align 8
  %37 = getelementptr inbounds [5 x i64], ptr %35, i64 %36
  %38 = getelementptr inbounds [5 x i64], ptr %37, i64 0, i64 2
  %39 = load i64, ptr %38, align 8
  %40 = xor i64 %39, -1
  %41 = load ptr, ptr %3, align 8
  %42 = load i64, ptr %6, align 8
  %43 = getelementptr inbounds [5 x i64], ptr %41, i64 %42
  %44 = getelementptr inbounds [5 x i64], ptr %43, i64 0, i64 3
  %45 = load i64, ptr %44, align 8
  %46 = and i64 %40, %45
  %47 = xor i64 %34, %46
  %48 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 1
  store i64 %47, ptr %48, align 8
  %49 = load ptr, ptr %3, align 8
  %50 = load i64, ptr %6, align 8
  %51 = getelementptr inbounds [5 x i64], ptr %49, i64 %50
  %52 = getelementptr inbounds [5 x i64], ptr %51, i64 0, i64 2
  %53 = load i64, ptr %52, align 8
  %54 = load ptr, ptr %3, align 8
  %55 = load i64, ptr %6, align 8
  %56 = getelementptr inbounds [5 x i64], ptr %54, i64 %55
  %57 = getelementptr inbounds [5 x i64], ptr %56, i64 0, i64 3
  %58 = load i64, ptr %57, align 8
  %59 = xor i64 %58, -1
  %60 = load ptr, ptr %3, align 8
  %61 = load i64, ptr %6, align 8
  %62 = getelementptr inbounds [5 x i64], ptr %60, i64 %61
  %63 = getelementptr inbounds [5 x i64], ptr %62, i64 0, i64 4
  %64 = load i64, ptr %63, align 8
  %65 = and i64 %59, %64
  %66 = xor i64 %53, %65
  %67 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 2
  store i64 %66, ptr %67, align 16
  %68 = load ptr, ptr %3, align 8
  %69 = load i64, ptr %6, align 8
  %70 = getelementptr inbounds [5 x i64], ptr %68, i64 %69
  %71 = getelementptr inbounds [5 x i64], ptr %70, i64 0, i64 3
  %72 = load i64, ptr %71, align 8
  %73 = load ptr, ptr %3, align 8
  %74 = load i64, ptr %6, align 8
  %75 = getelementptr inbounds [5 x i64], ptr %73, i64 %74
  %76 = getelementptr inbounds [5 x i64], ptr %75, i64 0, i64 4
  %77 = load i64, ptr %76, align 8
  %78 = xor i64 %77, -1
  %79 = load ptr, ptr %3, align 8
  %80 = load i64, ptr %6, align 8
  %81 = getelementptr inbounds [5 x i64], ptr %79, i64 %80
  %82 = getelementptr inbounds [5 x i64], ptr %81, i64 0, i64 0
  %83 = load i64, ptr %82, align 8
  %84 = and i64 %78, %83
  %85 = xor i64 %72, %84
  %86 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 3
  store i64 %85, ptr %86, align 8
  %87 = load ptr, ptr %3, align 8
  %88 = load i64, ptr %6, align 8
  %89 = getelementptr inbounds [5 x i64], ptr %87, i64 %88
  %90 = getelementptr inbounds [5 x i64], ptr %89, i64 0, i64 4
  %91 = load i64, ptr %90, align 8
  %92 = load ptr, ptr %3, align 8
  %93 = load i64, ptr %6, align 8
  %94 = getelementptr inbounds [5 x i64], ptr %92, i64 %93
  %95 = getelementptr inbounds [5 x i64], ptr %94, i64 0, i64 0
  %96 = load i64, ptr %95, align 8
  %97 = xor i64 %96, -1
  %98 = load ptr, ptr %3, align 8
  %99 = load i64, ptr %6, align 8
  %100 = getelementptr inbounds [5 x i64], ptr %98, i64 %99
  %101 = getelementptr inbounds [5 x i64], ptr %100, i64 0, i64 1
  %102 = load i64, ptr %101, align 8
  %103 = and i64 %97, %102
  %104 = xor i64 %91, %103
  %105 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 4
  store i64 %104, ptr %105, align 16
  %106 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 0
  %107 = load i64, ptr %106, align 16
  %108 = load ptr, ptr %3, align 8
  %109 = load i64, ptr %6, align 8
  %110 = getelementptr inbounds [5 x i64], ptr %108, i64 %109
  %111 = getelementptr inbounds [5 x i64], ptr %110, i64 0, i64 0
  store i64 %107, ptr %111, align 8
  %112 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 1
  %113 = load i64, ptr %112, align 8
  %114 = load ptr, ptr %3, align 8
  %115 = load i64, ptr %6, align 8
  %116 = getelementptr inbounds [5 x i64], ptr %114, i64 %115
  %117 = getelementptr inbounds [5 x i64], ptr %116, i64 0, i64 1
  store i64 %113, ptr %117, align 8
  %118 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 2
  %119 = load i64, ptr %118, align 16
  %120 = load ptr, ptr %3, align 8
  %121 = load i64, ptr %6, align 8
  %122 = getelementptr inbounds [5 x i64], ptr %120, i64 %121
  %123 = getelementptr inbounds [5 x i64], ptr %122, i64 0, i64 2
  store i64 %119, ptr %123, align 8
  %124 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 3
  %125 = load i64, ptr %124, align 8
  %126 = load ptr, ptr %3, align 8
  %127 = load i64, ptr %6, align 8
  %128 = getelementptr inbounds [5 x i64], ptr %126, i64 %127
  %129 = getelementptr inbounds [5 x i64], ptr %128, i64 0, i64 3
  store i64 %125, ptr %129, align 8
  %130 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 4
  %131 = load i64, ptr %130, align 16
  %132 = load ptr, ptr %3, align 8
  %133 = load i64, ptr %6, align 8
  %134 = getelementptr inbounds [5 x i64], ptr %132, i64 %133
  %135 = getelementptr inbounds [5 x i64], ptr %134, i64 0, i64 4
  store i64 %131, ptr %135, align 8
  br label %136

136:                                              ; preds = %10
  %137 = load i64, ptr %6, align 8
  %138 = add i64 %137, 1
  store i64 %138, ptr %6, align 8
  br label %7, !llvm.loop !6

139:                                              ; preds = %7
  %140 = load i64, ptr %4, align 8
  %141 = getelementptr inbounds [5 x i64], ptr %5, i64 0, i64 %140
  %142 = load i64, ptr %141, align 8
  ret i64 %142
}

Parsing the replacement bitcode main.go.nod.bc
Parsing error variant: 
Finding main.Chi in the replacement
	__go_init_main
	main.Chi
	Function found !
; Function Attrs: null_pointer_is_valid
define i64 @main.Chi(ptr nest nocapture readnone %nest.0, ptr %A, i64 %i) #0 {
entry:
  %C = alloca [5 x i64], align 8
  %0 = bitcast ptr %C to ptr
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %0)
  %icmp.14 = icmp eq ptr %A, null
  %index.0 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 0
  %index.7 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 1
  %index.14 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 2
  %index.21 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 3
  %index.28 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 4
  br label %then.70

then.7:                                           ; preds = %then.70
  call void @runtime.panicmem(ptr nest undef)
  unreachable

else.7:                                           ; preds = %then.70
  %index.2 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 0
  %.index.index.ld.2 = load i64, ptr %index.2, align 8
  %index.4 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 1
  %.index.index.ld.0 = load i64, ptr %index.4, align 8
  %xor.0 = xor i64 %.index.index.ld.0, -1
  %index.6 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 2
  %.index.index.ld.1 = load i64, ptr %index.6, align 8
  %iand.7 = and i64 %.index.index.ld.1, %xor.0
  %xor.1 = xor i64 %iand.7, %.index.index.ld.2
  %xor.2 = xor i64 %.index.index.ld.1, -1
  %index.13 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 3
  %.index.index.ld.4 = load i64, ptr %index.13, align 8
  %iand.15 = and i64 %.index.index.ld.4, %xor.2
  %xor.3 = xor i64 %iand.15, %.index.index.ld.0
  %xor.4 = xor i64 %.index.index.ld.4, -1
  %index.20 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 4
  %.index.index.ld.7 = load i64, ptr %index.20, align 8
  %iand.23 = and i64 %.index.index.ld.7, %xor.4
  %xor.5 = xor i64 %iand.23, %.index.index.ld.1
  %xor.6 = xor i64 %.index.index.ld.7, -1
  %iand.31 = and i64 %.index.index.ld.2, %xor.6
  %xor.7 = xor i64 %iand.31, %.index.index.ld.4
  %xor.8 = xor i64 %.index.index.ld.2, -1
  %iand.39 = and i64 %.index.index.ld.0, %xor.8
  %xor.9 = xor i64 %.index.index.ld.7, %iand.39
  store i64 %xor.1, ptr %index.2, align 8
  store i64 %xor.3, ptr %index.4, align 8
  store i64 %xor.5, ptr %index.6, align 8
  store i64 %xor.7, ptr %index.13, align 8
  store i64 %xor.9, ptr %index.20, align 8
  %add.0 = add nuw nsw i64 %y.0103, 1
  %exitcond.not = icmp eq i64 %add.0, 5
  br i1 %exitcond.not, label %else.70, label %then.70

then.70:                                          ; preds = %else.7, %entry
  %y.0103 = phi i64 [ 0, %entry ], [ %add.0, %else.7 ]
  br i1 %icmp.14, label %then.7, label %else.7, !make.implicit !3

else.70:                                          ; preds = %else.7
  store i64 %xor.1, ptr %index.0, align 8
  store i64 %xor.3, ptr %index.7, align 8
  store i64 %xor.5, ptr %index.14, align 8
  store i64 %xor.7, ptr %index.21, align 8
  store i64 %xor.9, ptr %index.28, align 8
  %1 = icmp ult i64 %i, 5
  br i1 %1, label %fallthrough.71, label %else.71

fallthrough.71:                                   ; preds = %else.70
  %index.50 = getelementptr [5 x i64], ptr %C, i64 0, i64 %i
  %C.index.ld.5 = load i64, ptr %index.50, align 8
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %0)
  ret i64 %C.index.ld.5

else.71:                                          ; preds = %else.70
  call void @runtime.goPanicIndexU(ptr nest undef, i64 %i, i64 5)
  unreachable
}

Both functions found. Making starting replacement 
New function 
; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @Chi(ptr noundef %0, i64 noundef %1) #0 {
entry:
  %C = alloca [5 x i64], align 8
  %2 = bitcast ptr %C to ptr
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %2)
  %icmp.14 = icmp eq ptr %A, null
  %index.0 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 0
  %index.7 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 1
  %index.14 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 2
  %index.21 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 3
  %index.28 = getelementptr inbounds [5 x i64], ptr %C, i64 0, i64 4
  br label %then.70

then.7:                                           ; preds = %then.70
  call void @runtime.panicmem(ptr nest undef)
  unreachable

else.7:                                           ; preds = %then.70
  %index.2 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 0
  %.index.index.ld.2 = load i64, ptr %index.2, align 8
  %index.4 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 1
  %.index.index.ld.0 = load i64, ptr %index.4, align 8
  %xor.0 = xor i64 %.index.index.ld.0, -1
  %index.6 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 2
  %.index.index.ld.1 = load i64, ptr %index.6, align 8
  %iand.7 = and i64 %.index.index.ld.1, %xor.0
  %xor.1 = xor i64 %iand.7, %.index.index.ld.2
  %xor.2 = xor i64 %.index.index.ld.1, -1
  %index.13 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 3
  %.index.index.ld.4 = load i64, ptr %index.13, align 8
  %iand.15 = and i64 %.index.index.ld.4, %xor.2
  %xor.3 = xor i64 %iand.15, %.index.index.ld.0
  %xor.4 = xor i64 %.index.index.ld.4, -1
  %index.20 = getelementptr [5 x [5 x i64]], ptr %A, i64 0, i64 %y.0103, i64 4
  %.index.index.ld.7 = load i64, ptr %index.20, align 8
  %iand.23 = and i64 %.index.index.ld.7, %xor.4
  %xor.5 = xor i64 %iand.23, %.index.index.ld.1
  %xor.6 = xor i64 %.index.index.ld.7, -1
  %iand.31 = and i64 %.index.index.ld.2, %xor.6
  %xor.7 = xor i64 %iand.31, %.index.index.ld.4
  %xor.8 = xor i64 %.index.index.ld.2, -1
  %iand.39 = and i64 %.index.index.ld.0, %xor.8
  %xor.9 = xor i64 %.index.index.ld.7, %iand.39
  store i64 %xor.1, ptr %index.2, align 8
  store i64 %xor.3, ptr %index.4, align 8
  store i64 %xor.5, ptr %index.6, align 8
  store i64 %xor.7, ptr %index.13, align 8
  store i64 %xor.9, ptr %index.20, align 8
  %add.0 = add nuw nsw i64 %y.0103, 1
  %exitcond.not = icmp eq i64 %add.0, 5
  br i1 %exitcond.not, label %else.70, label %then.70

then.70:                                          ; preds = %else.7, %entry
  %y.0103 = phi i64 [ 0, %entry ], [ %add.0, %else.7 ]
  br i1 %icmp.14, label %then.7, label %else.7, !make.implicit !6

else.70:                                          ; preds = %else.7
  store i64 %xor.1, ptr %index.0, align 8
  store i64 %xor.3, ptr %index.7, align 8
  store i64 %xor.5, ptr %index.14, align 8
  store i64 %xor.7, ptr %index.21, align 8
  store i64 %xor.9, ptr %index.28, align 8
  %3 = icmp ult i64 %i, 5
  br i1 %3, label %fallthrough.71, label %else.71

fallthrough.71:                                   ; preds = %else.70
  %index.50 = getelementptr [5 x i64], ptr %C, i64 0, i64 %i
  %C.index.ld.5 = load i64, ptr %index.50, align 8
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %2)
  ret i64 %C.index.ld.5

else.71:                                          ; preds = %else.70
  call void @runtime.goPanicIndexU(ptr nest undef, i64 %i, i64 5)
  unreachable
}

Basic blocks removed from original function 
Checking llvm.lifetime.start.p0
Checking runtime.panicmem
Checking llvm.lifetime.end.p0
Checking runtime.goPanicIndexU
