
func ulaw_to_s16(u_val uint8) int32 {
	var t int32

	// Complement to obtain normal u-law value.
	u_val = ^u_val

	// Extract and bias the quantization bits. Then
	// shift up by the segment number and subtract out the bias.
	t = (int32(u_val&0x0f) << 3) + 0x84
	t <<= (u_val & 0x70) >> 4

	if u_val&0x80 != 0 {
		return 0x84 - t
	}
	return t - 0x84
}



func ulaw_to_s16(u_val uint8) int32 {
    u_val = ^u_val
    
    quant_bits := (int32(u_val&0x0f) << 3) + 0x84
    segment_shift := (u_val & 0x70) >> 4
    t := quant_bits << segment_shift
    
    if (u_val & 0x80) != 0 {
        return 0x84 - t
    }
    return t - 0x84
}



func ulaw_to_s16(u_val uint8) int32 {
	u_val = ^u_val

	t := (int32(u_val&0x0f)<<3 | 0x84) << ((u_val & 0x70) >> 4)

	if u_val&0x80 != 0 {
		return 0x84 - t
	}

	return t - 0x84
}



func ulaw_to_s16(u_val uint8) int32 {
	u_val = ^u_val

	quantization_bits := (int32(u_val&0x0f) << 3) + 0x84
	shift := (u_val & 0x70) >> 4
	t := quantization_bits << shift

	if u_val&0x80 != 0 {
		return 0x84 - t
	}

	return t - 0x84
}



func ulaw_to_s16(u_val uint8) int32 {
	u_val = ^u_val

	t := (int32(u_val&0x0f)<<3 + 0x84) << ((u_val & 0x70) >> 4)

	if u_val&0x80 != 0 {
		return 0x84 - t
	}

	return t - 0x84
}



func ulaw_to_s16(u_val uint8) int32 {
	u_val = ^u_val

	base := (int32(u_val&0x0f) << 3) + 0x84
	segment := (u_val & 0x70) >> 4
	t := base << segment

	if u_val&0x80 != 0 {
		return 0x84 - t
	}

	return t - 0x84
}



func ulaw_to_s16(u_val uint8) int32 {
	u_val = ^u_val

	t := (int32(u_val&0x0f) << 3 + 0x84) << ((u_val & 0x70) >> 4)

	if u_val&0x80 != 0 {
		return 0x84 - t
	}

	return t - 0x84
}



func ulaw_to_s16(u_val uint8) int32 {
	u_val = ^u_val

	t := (int32(u_val&0x0f) << 3) + 0x84
	segment := (u_val & 0x70) >> 4
	t = t << segment

	if u_val&0x80 != 0 {
		return 0x84 - t
	}
	return t - 0x84
}



func ulaw_to_s16(u_val uint8) int32 {
	u_val = ^u_val

	q := (int32(u_val&0x0f) << 3) + 0x84
	s := (u_val & 0x70) >> 4
	t := q << s

	if u_val&0x80 != 0 {
		return 0x84 - t
	}
	return t - 0x84
}



func ulaw_to_s16(u_val uint8) int32 {
	u_val = ^u_val

	t := ((int32(u_val&0x0f) << 3) | 0x84) << ((u_val & 0x70) >> 4)

	if u_val&0x80 != 0 {
		return 0x84 - t
	}
	return t - 0x84
}
