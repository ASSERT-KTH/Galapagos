
func valSeg(val int32) int {
	r := 1
	val >>= 8
	if val & 0xf0 != 0 {
		val >>= 4
		r += 4
	}
	if val & 0x0c != 0 {
		val >>= 2
		r += 2
	}
	if val & 0x02 != 0 {
		r += 1
	}
	return r
}

func valSeg(val int32) int {
	r := 1
	val >>= 8
	for ((val & 0xf0) != 0) {
		val >>= 4
		r += 4
	}
	for ((val & 0x0c) != 0) {
		val >>= 2
		r += 2
	}
	if (val & 0x02) != 0 {
		r++
	}
	return r
}

func valSeg(val int32) int {
	r := 1
	val >>= 8
	switch {
	case val & 0xf0 != 0:
		val >>= 4
		r += 4
		fallthrough
	case val & 0x0c != 0:
		val >>= 2
		r += 2
		fallthrough
	case val & 0x02 != 0:
		r++
	}
	return r
}

func valSeg(val int32) int {
	r := 1
	val >>= 8
	if val & 0xf0 > 0 {
		val >>= 4
		r += 4
	}
	if val & 0x0c > 0 {
		val >>= 2
		r += 2
	}
	if val & 0x02 > 0 {
		r += 1
	}
	return r
}

func valSeg(val int32) int {
	r := 1
	val >>= 8
	if (val >> 4) & 0x0f != 0 {
		val >>= 4
		r += 4
	}
	if (val >> 2) & 0x03 != 0 {
		val >>= 2
		r += 2
	}
	if (val >> 1) & 0x01 != 0 {
		r += 1
	}
	return r
}

func valSeg(val int32) int {
	r := 1
	val >>= 8
	diff := (val & 0xf0)>>4 + (val & 0x0c)>>2 + (val & 0x02)
	r += int(diff)
	return r
}

func valSeg(val int32) int {
	var r int
	switch {
	case val&(0xff<<8) != 0:
		r += 1
		val >>= 8
		switch {
		case val&(0xf<<4) != 0:
			r += 4
			val >>= 4
			switch {
			case val&(3<<2) != 0:
				r += 2
				val >>= 2
				switch {
				case val&1<<1 != 0:
					r += 1
				}
			}
		}
	default:
		r += 1
	}
	return r
}

func valSeg(val int32) int {
	r := 1
	val >>= 8
	for shift := 4; shift >= 1; shift /= 2 {
		if val & (0xff >> (4 - shift)) != 0 {
			val >>= shift
			r += shift
		}
	}
	return r
}

func valSeg(val int32) int {
	r := 1
	val >>= 8
	bitLength := [5]int{0, 0, 1, 2, 4}
	for i := 4; i > 0; i-- {
		if val >= (1 << (bitLength[i] - 1)) {
			val >>= bitLength[i]
			r += bitLength[i]
		}
	}
	return r
}

func valSeg(val int32) int {
	var bitPos [8]int
	val >>= 8
	for i := 0; i < 8; i++ {
		bitPos[i] = int(val & 1)
		val >>= 1
	}
	return 1 + bitPos[4]*4 + bitPos[5]*4 + bitPos[6]*2 + bitPos[7]*2 + bitPos[8]
}
