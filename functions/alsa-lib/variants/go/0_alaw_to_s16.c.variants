
func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal & 0x7f)
	if t < 16 {
		t = (t << 4) + 8
	} else {
		seg := (t >> 4) & 0x07
		t = ((t & 0x0f) << 4) + 0x108
		t <<= seg - 1
	}
	if aVal&0x80 != 0 {
		return t
	}
	return -t
}

func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal & 0x7f)
	switch {
	case t < 16:
		t = (t << 4) + 8
	default:
		seg := (t >> 4) & 0x07
		t = ((t & 0x0f) << 4) + 0x108
		t <<= seg - 1
	}
	if aVal&0x80 != 0 {
		return t
	}
	return -t
}

func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal & 0x7f)
	if t >= 16 {
		seg := (t >> 4) & 0x07
		t = ((t & 0x0f) << 4) + 0x108
		t <<= seg - 1
	} else {
		t = (t << 4) + 8
	}
	if aVal&0x80 != 0 {
		return t
	}
	return -t
}

func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal&0x7f) << 3
	if t < 128 {
		t += 8
	} else {
		t += 0x800 + ((t & 0x70) << 4)
		t <<= ((t >> 4) & 0x07) - 1
	}
	if aVal&0x80 != 0 {
		return t
	}
	return -t
}

func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal & 0x7f) * 8
	if t < 128 {
		t += 8
	} else {
		seg := (t >> 7) & 0x07
		t = (t & 0x7f) + 0x108
		t <<= seg
	}
	if aVal&0x80 != 0 {
		return t
	}
	return -t
}

func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal & 0x7f)
	if t < 16 {
		t = (t << 4) + 8
	} else {
		seg := (t >> 4) & 0x07
		t = 0x108 + ((t & 0x0f) << 4)
		t <<= seg - 1
	}
	return t * int32(2*aVal&0x80 - 1)
}

func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal & 0x7f)
	if t < 16 {
		t = t<<4 + 8
	} else {
		seg := (t >> 4) & 0x07
		t = 0x108 + ((t & 0x0f) << 4)
		t = t << seg - 1
	}
	if aVal&0x80 != 0 {
		return t
	}
	return -t
}

func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal & 0x7f)
	if t < 16 {
		t = t*16 + 8
	} else {
		seg := (t / 16) & 0x07
		t = 0x108 + (t%16)*16
		t = t << (seg - 1)
	}
	if aVal&0x80 != 0 {
		return t
	}
	return -t
}

func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal & 0x7f)
	if t < 16 {
		t = t*16 + 8
	} else {
		seg := (t / 16) & 0x07
		t = 0x108 + (t%16)*16
		t <<= seg - 1
	}
	if aVal&0x80 != 0 {
		return t
	}
	return -t
}

func alawToS16(aVal byte) int32 {
	aVal ^= 0x55
	t := int32(aVal & 0x7f)
	if t < 16 {
		t = (t << 4) + 8
	} else {
		seg := int32((t >> 4) & 0x07)
		t = ((t & 0x0f) << 4) + 0x108
		t <<= seg - 1
	}
	if aVal&0x80 != 0 {
		return t
	}
	return -t
}
