
package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	if v > 2147483647 {
		return 2147483647
	}
	if v < -2147483648 {
		return -2147483648
	}
	return int32(v)
}



package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	switch {
	case v > int64(2147483647):
		return 2147483647
	case v < int64(-2147483648):
		return -2147483648
	default:
		return int32(v)
	}
}



package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	if v > int64(2147483647) {
		return int32(2147483647)
	}
	if v < int64(-2147483648) {
		return int32(-2147483648)
	}
	return int32(v)
}



package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := int64(a)*int64(b)/int64(c)
	if v > math.MaxInt32 {
		return int32(math.MaxInt32)
	}
	if v < math.MinInt32 {
		return int32(math.MinInt32)
	}
	return int32(v)
}



package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := (int64(a) * int64(b)) / int64(c)
	if v > 2147483647 {
		return 2147483647
	}
	if v < -2147483648 {
		return -2147483648
	}
	return int32(v)
}



package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := (int64(a) * int64(b) / int64(c))
	if v > int64((1<<31)-1) {
		return int32((1<<31)-1)
	}
	if v < int64(-(1<<31)) {
		return int32(-(1<<31))
	}
	return int32(v)
}



package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := (int64(a) * int64(b) / int64(c))
	if v > 2147483647 {
		return 1<<31 - 1
	}
	if v < -2147483648 {
		return -1 << 31
	}
	return int32(v)
}



package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	if v > int64(int32(1<<31-1)) {
		return int32(1<<31 - 1)
	}
	if v < int64(int32(-1<<31)) {
		return -1 << 31
	}
	return int32(v)
}



package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	if v > int64((^int32(0))>>1) {
		return int32((^int32(0)) >> 1)
	}
	if v < int64(-((^int32(0))>>1) - 1) {
		return -((^int32(0)) >> 1) - 1
	}
	return int32(v)
}



package main

func muldiv_down(a int32, b int32, c int32) int32 {
	v := (int64(a) * int64(b)) / int64(c)
	if v > int64(int32(^uint32(0)>>1)) {
		return int32(^uint32(0) >> 1)
	}
	if v < int64(int32(^uint32(0)>>1)+1) {
		return int32(^uint32(0)>>1) + 1
	}
	return int32(v)
}
