
import "math"

func muldivDown(a, b, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	if v > math.MaxInt32 {
		return math.MaxInt32
	}
	if v < math.MinInt32 {
		return math.MinInt32
	}
	return int32(v)
}

func muldivDown(a, b, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	if v > int64(math.MaxInt32) {
		return math.MaxInt32
	}
	if v < int64(math.MinInt32) {
		return math.MinInt32
	}
	return int32(v)
}

func muldivDown(a, b, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	if v > 2147483647 {
		return 2147483647
	}
	if v < -2147483648 {
		return -2147483648
	}
	return int32(v)
}

func muldivDown(a, b, c int32) int32 {
	v := (int64(a) * int64(b)) / int64(c)
	if v > 2147483647 {
		return 2147483647
	}
	if v < -2147483648 {
		return -2147483648
	}
	return int32(v)
}

func muldivDown(a, b, c int32) int32 {
	v := (int64(a) * int64(b)) / int64(c)
	if v > math.MaxInt32 {
		return math.MaxInt32
	}
	if v < math.MinInt32 {
		return math.MinInt32
	}
	return int32(v)
}

func muldivDown(a, b, c int32) int32 {
	const maxInt32 = 2147483647
	const minInt32 = -2147483648

	v := (int64(a) * int64(b)) / int64(c)
	if v > int64(maxInt32) {
		return maxInt32
	}
	if v < int64(minInt32) {
		return minInt32
	}
	return int32(v)
}

func muldivDown(a, b, c int32) int32 {
	v := (int64(a) * int64(b)) / int64(c)
	switch {
	case v > 2147483647:
		return 2147483647
	case v < -2147483648:
		return -2147483648
	default:
		return int32(v)
	}
}

func muldivDown(a, b, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	switch {
	case v > int64(math.MaxInt32):
		return math.MaxInt32
	case v < int64(math.MinInt32):
		return math.MinInt32
	default:
		return int32(v)
	}
}

func muldivDown(a, b, c int32) int32 {
	v := int64(a) * int64(b) / int64(c)
	if v > 2147483647 {
		return 2147483647
	} else if v < -2147483648 {
		return -2147483648
	}
	return int32(v)
}

func muldivDown(a, b, c int32) int32 {
	v := (int64(a) * int64(b) / int64(c))
	if v > 2147483647 {
		return 2147483647
	} else if v < -2147483648 {
		return -2147483648
	}
	return int32(v)
}
