
static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b;
	v /= c;
	if (v > INT_MAX) {
		v = INT_MAX;
	}
	if (v < INT_MIN) {
		v = INT_MIN;
	}
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b / c;
	if (v > INT_MAX) {
		v = INT_MAX;
	} else if (v < INT_MIN) {
		v = INT_MIN;
	}
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)(a * b);
	v = v / c;
	if (v > INT_MAX) return INT_MAX;
	if (v < INT_MIN) return INT_MIN;
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t product = (int64_t)a * b;
	int64_t v = product / c;
	if (v > INT_MAX) return INT_MAX;
	if (v < INT_MIN) return INT_MIN;
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t product = (int64_t)a * b;
	int lower_bound = INT_MIN;
	int upper_bound = INT_MAX;
	int64_t v = product / c;
	if (v > upper_bound) return upper_bound;
	if (v < lower_bound) return lower_bound;
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t result;
	result = (int64_t)a * b;
	result /= c;
	if (result > INT_MAX) result = INT_MAX;
	if (result < INT_MIN) result = INT_MIN;
	return (int)result;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (((int64_t)a * b) / c);
	return v > INT_MAX ? INT_MAX : (v < INT_MIN ? INT_MIN : (int)v);
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t temp = (int64_t)a * b;
	int64_t quo = temp / c;
	if (quo > INT_MAX) return INT_MAX;
	if (quo < INT_MIN) return INT_MIN;
	return (int)quo;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b;
	int64_t div = v / c;
	if (div > INT_MAX) return INT_MAX;
	if (div < INT_MIN) return INT_MIN;
	return (int)div;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t val = (int64_t)a * b / c;
	return (int)((val > INT_MAX) ? INT_MAX : (val < INT_MIN) ? INT_MIN : val);
}
