
static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b;
	v /= c;
	if (v > INT32_MAX) {
		return INT32_MAX;
	}
	if (v < INT32_MIN) {
		return INT32_MIN;
	}
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b;
	v = v / c;
	if (v > 0x7FFFFFFF) {
		return 0x7FFFFFFF;
	}
	if (v < -0x80000000) {
		return -0x80000000;
	}
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b / (int64_t)c;
	if (v > 2147483647LL) {
		return 2147483647;
	}
	if (v < -2147483648LL) {
		return -2147483648;
	}
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = ((int64_t)a * b) / c;
	if (v > 2147483647LL) {
		return 0x7FFFFFFF;
	}
	if (v < -2147483648LL) {
		return 0x80000000;
	}
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b;
	v /= c;
	int result = (v > INT32_MAX) ? INT32_MAX : (v < INT32_MIN) ? INT32_MIN : (int)v;
	return result;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b / c;
	v = (v > 2147483647LL) ? 2147483647 : (v < -2147483648LL) ? -2147483648 : v;
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b / c;
	if (v > 2147483647LL) {
		v = 2147483647;
	} else if (v < -2147483648LL) {
		v = -2147483648;
	}
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b / c;
	return (v > INT32_MAX) ? INT32_MAX : (v < INT32_MIN) ? INT32_MIN : (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = ((int64_t)a * b) / (int64_t)c;
	int maxInt = 2147483647;
	int minInt = -2147483648;
	if (v > maxInt) {
		return maxInt;
	}
	if (v < minInt) {
		return minInt;
	}
	return (int)v;
}

static inline int muldiv_down(int a, int b, int c)
{
	int64_t v = (int64_t)a * b;
	v /= (int64_t)c;
	if (v > INT32_MAX) {
		v = INT32_MAX;
	} else if (v < INT32_MIN) {
		v = INT32_MIN;
	}
	return (int)v;
}
