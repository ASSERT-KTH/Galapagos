
static uint64_t icbrt64(uint64_t x)
{
    uint64_t r = 0;
    uint64_t b;
    int s;

    for (s = 60; s >= 0; s -= 3) {
        r <<= 1;
        b = 3 * r * (r + 1) + 1;
        if ((x >> s) >= b) {
            x -= b << s;
            r++;
        }
    }
    return r * 1 << (2 * 18 / 3);
}

static uint64_t icbrt64(uint64_t x)
{
    uint64_t r = 0;
    uint64_t b;

    for (int s = 63; s >= 0; s -= 3) {
        r <<= 1;
        b = 3 * r * (r + 1) + 1;
        if ((x >> s) >= b) {
            x -= b << s;
            r++;
        }
    }
    return r << 12;
}

static uint64_t icbrt64(uint64_t x)
{
    uint64_t result = 0;
    uint64_t bit;

    for (int shift = 63; shift >= 0; shift -= 3) {
        result <<= 1;
        bit = 3 * result * (result + 1) + 1;
        if ((x >> shift) >= bit) {
            x -= bit << shift;
            result++;
        }
    }
    return result << (2 * 18 / 3);
}

static uint64_t icbrt64(uint64_t x)
{
    uint64_t result = 0;
    uint64_t bit;
    int shift;

    for (shift = 63; shift >= 0; shift -= 3) {
        result <<= 1;
        bit = 3 * result * (result + 1) + 1;
        if ((x >> shift) >= bit) {
            x -= bit << shift;
            result++;
        }
    }
    return result << 12;
}

static uint64_t icbrt64(uint64_t x)
{
    uint64_t r = 0;
    uint64_t b;
    int s;

    for (s = 63; s >= 3; s -= 3) {
        r <<= 1;
        b = 3 * r * (r + 1) + 1;
        if ((x >> s) >= b) {
            x -= b << s;
            r++;
        }
    }
    return r * 1 << ((2 * 18) / 3);
}

static uint64_t icbrt64(uint64_t x)
{
    uint64_t r = 0;
    uint64_t b;

    for (int s = 63; s >= 0; s -= 3) {
        r <<= 1;
        b = 3 * r * (r + 1) + 1;
        if ((x >> s) >= b) {
            x -= b << s;
            r++;
        }
    }
    return r * 1 << 12;
}

static uint64_t icbrt64(uint64_t x)
{
    uint64_t result = 0;
    uint64_t b;
    int s;

    for (s = 63; s >= 0; s -= 3) {
        result <<= 1;
        b = 3 * result * (result + 1) + 1;
        if ((x >> s) >= b) {
            x -= b << s;
            result++;
        }
    }
    return result << (2 * 18 / 3);
}

static uint64_t icbrt64(uint64_t x)
{
    uint64_t result = 0;
    uint64_t b;
    int s;

    for (s = 63; s >= 0; s -= 3) {
        result = (result << 1) & 0xFFFFFFFFFFFFFFFF;
        b = 3 * result * (result + 1) + 1;
        if ((x >> s) >= b) {
            x -= b << s;
            result++;
        }
    }
    return result * 1 << 12;
}

static uint64_t icbrt64(uint64_t x)
{
    uint64_t r = 0;
    uint64_t b;
    int s;

    for (s = 62; s >= 0; s -= 3) {
        r <<= 1;
        b = 3 * r * (r + 1) + 1;
        if ((x >> s) >= b) {
            x -= b << s;
            r++;
        }
    }
    return r << 12;
}

static uint64_t icbrt64(uint64_t x)
{
    uint64_t r = 0;
    uint64_t b;

    for (int s = 64 - 1; s >= 0; s -= 3) {
        r <<= 1;
        b = 3 * r * (r + 1) + 1;
        if ((x >> s) >= b) {
            x -= b << s;
            r++;
        }
    }
    return r << ((2 * 18) / 3);
}
