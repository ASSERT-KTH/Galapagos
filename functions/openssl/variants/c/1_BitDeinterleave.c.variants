
static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint64_t deinterleaved = 0;
    for (int i = 0; i < 32; i++) {
        deinterleaved |= ((Ai >> (2 * i)) & 1) << i;
        deinterleaved |= ((Ai >> (2 * i + 1)) & 1) << (i + 32);
    }
    return deinterleaved;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t even = Ai & 0x55555555;
    uint32_t odd = (Ai >> 1) & 0x55555555;
    even |= even >> 1;  even &= 0x33333333;
    even |= even >> 2;  even &= 0x0f0f0f0f;
    even |= even >> 4;  even &= 0x00ff00ff;
    even |= even >> 8;  even &= 0x0000ffff;
    odd |= odd >> 1;   odd &= 0x33333333;
    odd |= odd >> 2;   odd &= 0x0f0f0f0f;
    odd |= odd >> 4;   odd &= 0x00ff00ff;
    odd |= odd >> 8;   odd &= 0x0000ffff;
    return ((uint64_t)odd << 32) | even;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint64_t t = Ai & 0xaaaaaaaa;
    t = (t | (t >> 1)) & 0x3333333333333333;
    t = (t | (t >> 2)) & 0x0f0f0f0f0f0f0f0f;
    t = (t | (t >> 4)) & 0x00ff00ff00ff00ff;
    t = (t | (t >> 8)) & 0x0000ffff0000ffff;
    t = (t | (t >> 16)) & 0x00000000ffffffff;
    uint64_t t2 = Ai & 0x55555555;
    t2 = (t2 | (t2 << 1)) & 0x3333333333333333;
    t2 = (t2 | (t2 << 2)) & 0x0f0f0f0f0f0f0f0f;
    t2 = (t2 | (t2 << 4)) & 0x00ff00ff00ff00ff;
    t2 = (t2 | (t2 << 8)) & 0x0000ffff0000ffff;
    t2 = t2 | (t2 << 16);
    return (t << 32) | (t2 & 0x00000000ffffffff);
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint64_t lo = Ai & 0x5555555555555555;
    uint64_t hi = (Ai >> 1) & 0x5555555555555555;
    lo = (lo | (lo >> 1)) & 0x3333333333333333;
    lo = (lo | (lo >> 2)) & 0x0f0f0f0f0f0f0f0f;
    lo = (lo | (lo >> 4)) & 0x00ff00ff00ff00ff;
    lo = (lo | (lo >> 8)) & 0x0000ffff0000ffff;
    lo = (lo | (lo >> 16)) & 0x00000000ffffffff;
    hi = (hi | (hi >> 1)) & 0x3333333333333333;
    hi = (hi | (hi >> 2)) & 0x0f0f0f0f0f0f0f0f;
    hi = (hi | (hi >> 4)) & 0x00ff00ff00ff00ff;
    hi = (hi | (hi >> 8)) & 0x0000ffff0000ffff;
    hi = (hi | (hi >> 16)) & 0x00000000ffffffff;
    return (hi << 32) | lo;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t x = (uint32_t)(Ai & 0xffffffff);
    uint32_t y = (uint32_t)(Ai >> 32);
    uint32_t z = 0, w = 0;
    for (int i = 0; i < 16; i++) {
        z |= (x & (1 << (2 * i))) >> i;
        z |= (y & (1 << (2 * i))) >> (i - 16);
        w |= (x & (1 << (2 * i + 1))) >> (i + 1);
        w |= (y & (1 << (2 * i + 1))) >> (i - 15);
    }
    return ((uint64_t)w << 32) | z;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint64_t even = 0, odd = 0;
    for (int i = 0; i < 32; i++) {
        even |= ((Ai >> (2 * i)) & 1) << i;
        odd |= ((Ai >> (2 * i + 1)) & 1) << i;
    }
    return (odd << 32) | even;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint64_t x = Ai & 0x5555555555555555;
    uint64_t y = (Ai >> 1) & 0x5555555555555555;
    x = (x | (x >> 1)) & 0x3333333333333333;
    x = (x | (x >> 2)) & 0x0f0f0f0f0f0f0f0f;
    x = (x | (x >> 4)) & 0x00ff00ff00ff00ff;
    x = (x | (x >> 8)) & 0x0000ffff0000ffff;
    x = (x | (x >> 16)) & 0x00000000ffffffff;
    y = (y | (y >> 1)) & 0x3333333333333333;
    y = (y | (y >> 2)) & 0x0f0f0f0f0f0f0f0f;
    y = (y | (y >> 4)) & 0x00ff00ff00ff00ff;
    y = (y | (y >> 8)) & 0x0000ffff0000ffff;
    y = (y | (y >> 16)) & 0x00000000ffffffff;
    return (y << 32) | x;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint64_t x = Ai & 0x5555555555555555;
    uint64_t y = (Ai >> 1) & 0x5555555555555555;
    x = (x | (x >> 1)) & 0x3333333333333333;
    x = (x | (x >> 2)) & 0x0f0f0f0f0f0f0f0f;
    x = (x | (x >> 4)) & 0x00ff00ff00ff00ff;
    x = (x | (x >> 8)) & 0x0000ffff0000ffff;
    x = (x | (x >> 16)) & 0x00000000ffffffff;
    y = (y | (y >> 1)) & 0x3333333333333333;
    y = (y | (y >> 2)) & 0x0f0f0f0f0f0f0f0f;
    y = (y | (y >> 4)) & 0x00ff00ff00ff00ff;
    y = (y | (y >> 8)) & 0x0000ffff0000ffff;
    y = (y | (y >> 16)) & 0x00000000ffffffff;
    return (y << 32) | x;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint64_t x = Ai & 0x5555555555555555;
    uint64_t y = (Ai >> 1) & 0x5555555555555555;
    x = (x | (x >> 1)) & 0x3333333333333333;
    x = (x | (x >> 2)) & 0x0f0f0f0f0f0f0f0f;
    x = (x | (x >> 4)) & 0x00ff00ff00ff00ff;
    x = (x | (x >> 8)) & 0x0000ffff0000ffff;
    x = (x | (x >> 16)) & 0x00000000ffffffff;
    y = (y | (y >> 1)) & 0x3333333333333333;
    y = (y | (y >> 2)) & 0x0f0f0f0f0f0f0f0f;
    y = (y | (y >> 4)) & 0x00ff00ff00ff00ff;
    y = (y | (y >> 8)) & 0x0000ffff0000ffff;
    y = (y | (y >> 16)) & 0x00000000ffffffff;
    return (y << 32) | x;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint64_t x = Ai & 0x5555555555555555;
    uint64_t y = (Ai >> 1) & 0x5555555555555555;
    x = (x | (x >> 1)) & 0x3333333333333333;
    x = (x | (x >> 2)) & 0x0f0f0f0f0f0f0f0f;
    x = (x | (x >> 4)) & 0x00ff00ff00ff00ff;
    x = (x | (x >> 8)) & 0x0000ffff0000ffff;
    x = (x | (x >> 16)) & 0x00000000ffffffff;
    y = (y | (y >> 1)) & 0x3333333333333333;
    y = (y | (y >> 2)) & 0x0f0f0f0f0f0f0f0f;
    y = (y | (y >> 4)) & 0x00ff00ff00ff00ff;
    y = (y | (y >> 8)) & 0x0000ffff0000ffff;
    y = (y | (y >> 16)) & 0x00000000ffffffff;
    return (y << 32) | x;
}
