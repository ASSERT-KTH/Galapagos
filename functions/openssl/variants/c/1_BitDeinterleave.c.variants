
static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = Ai >> 32, lo = Ai & 0xFFFFFFFF;
    
    hi = ((hi & 0xAAAAAAAA) >> 1) | ((hi & 0x55555555) << 1);
    hi = ((hi & 0xCCCCCCCC) >> 2) | ((hi & 0x33333333) << 2);
    hi = ((hi & 0xF0F0F0F0) >> 4) | ((hi & 0x0F0F0F0F) << 4);
    hi = ((hi & 0xFF00FF00) >> 8) | ((hi & 0x00FF00FF) << 8);
    hi = ((hi & 0xFFFF0000) >> 16) | ((hi & 0x0000FFFF) << 16);
    
    lo = ((lo & 0xAAAAAAAA) >> 1) | ((lo & 0x55555555) << 1);
    lo = ((lo & 0xCCCCCCCC) >> 2) | ((lo & 0x33333333) << 2);
    lo = ((lo & 0xF0F0F0F0) >> 4) | ((lo & 0x0F0F0F0F) << 4);
    lo = ((lo & 0xFF00FF00) >> 8) | ((lo & 0x00FF00FF) << 8);
    lo = ((lo & 0xFFFF0000) >> 16) | ((lo & 0x0000FFFF) << 16);

    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = (Ai >> 32) & 0xFFFFFFFF;
    uint32_t lo = Ai & 0xFFFFFFFF;

    hi = ((hi & 0xFFFF0000) >> 16) | (hi << 16);
    hi = ((hi & 0x00FF00FF) << 8) | ((hi >> 8) & 0x00FF00FF);
    hi = ((hi & 0x0F0F0F0F) << 4) | ((hi >> 4) & 0x0F0F0F0F);
    hi = ((hi & 0x33333333) << 2) | ((hi >> 2) & 0x33333333);
    hi = ((hi & 0x55555555) << 1) | ((hi >> 1) & 0x55555555);

    lo = ((lo & 0xFFFF0000) >> 16) | (lo << 16);
    lo = ((lo & 0x00FF00FF) << 8) | ((lo >> 8) & 0x00FF00FF);
    lo = ((lo & 0x0F0F0F0F) << 4) | ((lo >> 4) & 0x0F0F0F0F);
    lo = ((lo & 0x33333333) << 2) | ((lo >> 2) & 0x33333333);
    lo = ((lo & 0x55555555) << 1) | ((lo >> 1) & 0x55555555);

    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = (uint32_t)(Ai >> 32), lo = (uint32_t)Ai;

    hi = (hi & 0xFFFF0000) >> 16 | (hi & 0x0000FFFF) << 16;
    hi = (hi & 0xFF00FF00) >> 8 | (hi & 0x00FF00FF) << 8;
    hi = (hi & 0xF0F0F0F0) >> 4 | (hi & 0x0F0F0F0F) << 4;
    hi = (hi & 0xCCCCCCCC) >> 2 | (hi & 0x33333333) << 2;
    hi = (hi & 0xAAAAAAAA) >> 1 | (hi & 0x55555555) << 1;

    lo = (lo & 0xFFFF0000) >> 16 | (lo & 0x0000FFFF) << 16;
    lo = (lo & 0xFF00FF00) >> 8 | (lo & 0x00FF00FF) << 8;
    lo = (lo & 0xF0F0F0F0) >> 4 | (lo & 0x0F0F0F0F) << 4;
    lo = (lo & 0xCCCCCCCC) >> 2 | (lo & 0x33333333) << 2;
    lo = (lo & 0xAAAAAAAA) >> 1 | (lo & 0x55555555) << 1;

    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = Ai >> 32, lo = Ai & 0xFFFFFFFF;

    for (int j = 16; j > 0; j >>= 1) {
        hi = ((hi >> j) & (0xFFFFFFFF >> (32 - j))) | ((hi & (0xFFFFFFFF >> (32 - j))) << j);
        lo = ((lo >> j) & (0xFFFFFFFF >> (32 - j))) | ((lo & (0xFFFFFFFF >> (32 - j))) << j);
    }

    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = (uint32_t)(Ai >> 32), lo = (uint32_t)Ai;
    
    for (int shift = 1; shift < 32; shift <<= 1) {
        hi = (hi & (0xFFFFFFFF << shift)) | ((hi & (0xFFFFFFFF >> shift)) << (shift << 1)) | ((hi & (0xFFFFFFFF >> (shift << 1))) >> shift);
        lo = (lo & (0xFFFFFFFF << shift)) | ((lo & (0xFFFFFFFF >> shift)) << (shift << 1)) | ((lo & (0xFFFFFFFF >> (shift << 1))) >> shift);
    }
    
    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = Ai >> 32;
    uint32_t lo = Ai & 0xFFFFFFFF;

    hi = (hi & 0xAAAAAAAA) >> 1 | (hi & 0x55555555) << 1;
    lo = (lo & 0xAAAAAAAA) >> 1 | (lo & 0x55555555) << 1;

    hi = (hi & 0xCCCCCCCC) >> 2 | (hi & 0x33333333) << 2;
    lo = (lo & 0xCCCCCCCC) >> 2 | (lo & 0x33333333) << 2;

    hi = (hi & 0xF0F0F0F0) >> 4 | (hi & 0x0F0F0F0F) << 4;
    lo = (lo & 0xF0F0F0F0) >> 4 | (lo & 0x0F0F0F0F) << 4;

    hi = (hi & 0xFF00FF00) >> 8 | (hi & 0x00FF00FF) << 8;
    lo = (lo & 0xFF00FF00) >> 8 | (lo & 0x00FF00FF) << 8;

    hi = (hi & 0xFFFF0000) >> 16 | (hi & 0x0000FFFF) << 16;
    lo = (lo & 0xFFFF0000) >> 16 | (lo & 0x0000FFFF) << 16;

    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = (Ai >> 32) & 0xFFFFFFFF;
    uint32_t lo = Ai & 0xFFFFFFFF;

    hi = (hi & 0xAAAAAAAA) >> 1 | (hi & 0x55555555) << 1;
    lo = (lo & 0xAAAAAAAA) >> 1 | (lo & 0x55555555) << 1;

    hi = (hi & 0xCCCCCCCC) >> 2 | (hi & 0x33333333) << 2;
    lo = (lo & 0xCCCCCCCC) >> 2 | (lo & 0x33333333) << 2;

    hi = (hi & 0xF0F0F0F0) >> 4 | (hi & 0x0F0F0F0F) << 4;
    lo = (lo & 0xF0F0F0F0) >> 4 | (lo & 0x0F0F0F0F) << 4;

    hi = (hi & 0xFF00FF00) >> 8 | (hi & 0x00FF00FF) << 8;
    lo = (lo & 0xFF00FF00) >> 8 | (lo & 0x00FF00FF) << 8;

    hi = (hi & 0xFFFF0000) >> 16 | (hi & 0x0000FFFF) << 16;
    lo = (lo & 0xFFFF0000) >> 16 | (lo & 0x0000FFFF) << 16;

    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = Ai >> 32;
    uint32_t lo = Ai & 0xFFFFFFFF;

    hi = ((hi & 0x55555555) << 1) | ((hi & 0xAAAAAAAA) >> 1);
    hi = ((hi & 0x33333333) << 2) | ((hi & 0xCCCCCCCC) >> 2);
    hi = ((hi & 0x0F0F0F0F) << 4) | ((hi & 0xF0F0F0F0) >> 4);
    hi = ((hi & 0x00FF00FF) << 8) | ((hi & 0xFF00FF00) >> 8);
    hi = ((hi & 0x0000FFFF) << 16) | ((hi & 0xFFFF0000) >> 16);

    lo = ((lo & 0x55555555) << 1) | ((lo & 0xAAAAAAAA) >> 1);
    lo = ((lo & 0x33333333) << 2) | ((lo & 0xCCCCCCCC) >> 2);
    lo = ((lo & 0x0F0F0F0F) << 4) | ((lo & 0xF0F0F0F0) >> 4);
    lo = ((lo & 0x00FF00FF) << 8) | ((lo & 0xFF00FF00) >> 8);
    lo = ((lo & 0x0000FFFF) << 16) | ((lo & 0xFFFF0000) >> 16);

    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = (uint32_t)(Ai >> 32), lo = (uint32_t)Ai;

    hi = (hi >> 16) | (hi << 16);
    hi = ((hi >>  8) & 0x00FF00FF) | ((hi & 0x00FF00FF) << 8);
    hi = ((hi >>  4) & 0x0F0F0F0F) | ((hi & 0x0F0F0F0F) << 4);
    hi = ((hi >>  2) & 0x33333333) | ((hi & 0x33333333) << 2);
    hi = ((hi >>  1) & 0x55555555) | ((hi & 0x55555555) << 1);
    
    lo = (lo >> 16) | (lo << 16);
    lo = ((lo >>  8) & 0x00FF00FF) | ((lo & 0x00FF00FF) << 8);
    lo = ((lo >>  4) & 0x0F0F0F0F) | ((lo & 0x0F0F0F0F) << 4);
    lo = ((lo >>  2) & 0x33333333) | ((lo & 0x33333333) << 2);
    lo = ((lo >>  1) & 0x55555555) | ((lo & 0x55555555) << 1);

    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}

static uint64_t BitDeinterleave(uint64_t Ai)
{
    uint32_t hi = (Ai >> 32) & 0xFFFFFFFF;
    uint32_t lo = Ai & 0xFFFFFFFF;

    hi = ((hi >> 16) & 0x0000FFFF) | (hi << 16);
    lo = ((lo >> 16) & 0x0000FFFF) | (lo << 16);

    hi = ((hi >> 8) & 0x00FF00FF) | ((hi & 0x00FF00FF) << 8);
    lo = ((lo >> 8) & 0x00FF00FF) | ((lo & 0x00FF00FF) << 8);

    hi = ((hi >> 4) & 0x0F0F0F0F) | ((hi & 0x0F0F0F0F) << 4);
    lo = ((lo >> 4) & 0x0F0F0F0F) | ((lo & 0x0F0F0F0F) << 4);

    hi = ((hi >> 2) & 0x33333333) | ((hi & 0x33333333) << 2);
    lo = ((lo >> 2) & 0x33333333) | ((lo & 0x33333333) << 2);

    hi = ((hi >> 1) & 0x55555555) | ((hi & 0x55555555) << 1);
    lo = ((lo >> 1) & 0x55555555) | ((lo & 0x55555555) << 1);

    Ai = ((uint64_t)hi << 32) | lo;
    return Ai;
}
