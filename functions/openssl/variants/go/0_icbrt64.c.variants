
import "math/big"

func icbrt64(x uint64) uint64 {
    r := big.NewInt(0)
    one := big.NewInt(1)
    three := big.NewInt(3)

    for s := 63; s >= 0; s -= 3 {
        r.Lsh(r, 1)
        rPlus1 := big.NewInt(0).Add(r, one)
        b := big.NewInt(0).Mul(three, r)
        b.Mul(b, rPlus1).Add(b, one)

        xBig := big.NewInt(0).Rsh(big.NewInt(0).SetUint64(x), uint(s))
        if xBig.Cmp(b) >= 0 {
            x -= b.Lsh(b, uint(s)).Uint64()
            r.Add(r, one)
        }
    }
    cbrtScale := big.NewInt(64)
    return r.Mul(r, cbrtScale).Uint64()
}


func icbrt64(x uint64) uint64 {
    var r uint64 = 0

    for s := 63; s >= 0; s -= 3 {
        r <<= 1
        b := 3*r*(r+1) + 1
        if x>>s >= b {
            x -= b << s
            r++
        }
    }
    const cbrt_scale uint64 = 1 // Assuming cbrt_scale is 1
    return r * cbrt_scale
}


func icbrt64(x uint64) uint64 {
    var r uint64 = 0

    for s := uint(63); s < ^uint(0); s -= 3 {
        r <<= 1
        b := 3*r*(r+1) + 1
        if x>>s >= b {
            x -= b << s
            r++
        }
    }
    const cbrt_scale uint64 = 1 // Adjust as needed
    return r * cbrt_scale
}


func icbrt64(x uint64) uint64 {
    var r uint64 = 0

    for s := 63; s >= 0; s -= 3 {
        r <<= 1
        temp := r + 1
        b := 3*r*temp + 1
        if x>>uint(s) >= b {
            x -= b << uint(s)
            r++
        }
    }
    const cbrt_scale uint64 = 1 // Replace with actual scale if provided
    return r * cbrt_scale
}


func icbrt64(x uint64) uint64 {
    r := uint64(0)

    for s := 63; s >= 0; s -= 3 {
        r <<= 1
        b := 3 * r * (r + 1) + 1
        if (x >> uint(s)) >= b {
            x -= b << uint(s)
            r++
        }
    }
    const cbrt_scale uint64 = 1 // Using 1 as default scale
    return r * cbrt_scale
}


func icbrt64(x uint64) uint64 {
    r := uint64(0)

    for s := 63; s >= 0; s -= 3 {
        r <<= 1
        b := 3 * r * (r + 1) + 1
        if x>>uint(s) >= b {
            x -= b << uint(s)
            r++
        }
    }
    const cbrt_scale uint64 = 1 
    return r * cbrt_scale
}


func icbrt64(x uint64) uint64 {
    r := uint64(0)

    for s := uint(63); int(s) >= 0; s -= 3 {
        r <<= 1
        b := 3 * r * (r + 1) + 1
        if x>>s >= b {
            x -= b << s
            r++
        }
    }
    const cbrt_scale = uint64(1) // Default scale
    return r * cbrt_scale
}


func icbrt64(x uint64) uint64 {
    r := uint64(0)

    for s := 63; s >= 0; s -= 3 {
        r <<= 1
        b := 3*r*(r+1) + 1
        if x>>uint(s) >= b {
            x -= b << uint(s)
            r++
        }
    }
    const cbrt_scale uint64 = 1 // Assign as needed
    return r * cbrt_scale
}


func icbrt64(x uint64) uint64 {
    r := uint64(0)

    for s := 63; s >= 0; s -= 3 {
        r <<= 1
        b := 3 * r * (r + 1) + 1
        if x>>(uint(s)) >= b {
            x -= b << (uint(s))
            r++
        }
    }
    const cbrt_scale uint64 = 1 // Assuming 1 for consistency
    return r * cbrt_scale
}


func icbrt64(x uint64) uint64 {
    r := uint64(0)

    for s := uint(63); int(s) >= 0; s -= 3 {
        r <<= 1
        b := 3 * r * (r + 1) + 1
        if (x >> s) >= b {
            x -= b << s
            r++
        }
    }
    const cbrt_scale uint64 = 1
    return r * cbrt_scale
}
