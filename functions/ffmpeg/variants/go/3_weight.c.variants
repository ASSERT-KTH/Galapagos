
func weight(i int32, blen int32, offset int32) int32 {
    if i < 2*offset {
        if offset == 1 {
            if i != 0 {
                return 5
            } else {
                return 3
            }
        } else {
            return 1 + (6*i + offset - 1) / (2*offset - 1)
        }
    } else if i > blen-1-2*offset {
        if offset == 1 {
            if blen-1-i != 0 {
                return 5
            } else {
                return 3
            }
        } else {
            return 1 + (6*(blen-1-i) + offset - 1) / (2*offset - 1)
        }
    }
    return 8
}



func weight(i, blen, offset int32) int32 {
    switch {
    case i < 2*offset:
        if offset == 1 {
            if i == 0 {
                return 3
            }
            return 5
        }
        return 1 + (6*i + offset - 1) / (2*offset - 1)
    case i > blen-1-2*offset:
        if offset == 1 {
            if blen-1-i == 0 {
                return 3
            }
            return 5
        }
        return 1 + (6*(blen-1-i) + offset - 1) / (2*offset - 1)
    default:
        return 8
    }
}



func weight(i int32, blen int32, offset int32) int32 {
    if i < 2*offset {
        if offset == 1 {
            if i != 0 {
                return 5
            }
            return 3
        }
        return 1 + (6*i + offset - 1) / (2*offset - 1)
    }
    if i > blen-1-2*offset {
        if offset == 1 {
            if blen-1-i != 0 {
                return 5
            }
            return 3
        }
        return 1 + (6*(blen-1-i) + offset - 1) / (2*offset - 1)
    }
    return 8
}



func weight(i, blen, offset int32) int32 {
    if i < 2*offset {
        if offset == 1 {
            if i > 0 {
                return 5
            }
            return 3
        }
        return (6*i + offset - 1)/(2*offset - 1) + 1
    }
    if i > blen - 1 - 2*offset {
        if offset == 1 {
            if blen-1-i > 0 {
                return 5
            }
            return 3
        }
        return (6*(blen-1-i) + offset - 1)/(2*offset - 1) + 1
    }
    return 8
}



func weight(i int32, blen int32, offset int32) int32 {
    if i < 2*offset {
        if offset == 1 {
            if i != 0 {
                return 5
            }
            return 3
        }
        return 1 + (6*i + offset - 1)/(2*offset - 1)
    }

    if i > blen - 1 - 2*offset {
        if offset == 1 {
            if blen-1-i != 0 {
                return 5
            }
            return 3
        }
        return 1 + (6*(blen-1-i)+offset-1)/(2*offset-1)
    }

    return 8
}



func weight(i int32, blen int32, offset int32) int32 {
    if i < 2*offset {
        if offset == 1 {
            if i != 0 {
                return 5
            }
            return 3
        }
        return 1 + (6*i + offset - 1)/(2*offset - 1)
    } else {
        if i > blen-1-2*offset {
            if offset == 1 {
                if blen-1-i != 0 {
                    return 5
                }
                return 3
            }
            return 1 + (6*(blen-1-i) + offset - 1)/(2*offset - 1)
        }
    }
    return 8
}



func weight(i int32, blen int32, offset int32) int32 {
    if i < 2*offset {
        if offset == 1 {
            if i != 0 {
                return 5
            }
            return 3
        }
        return (6*i + offset - 1)/(2*offset - 1) + 1
    } else {
        if i > blen-1-2*offset {
            if offset == 1 {
                if blen-1-i != 0 {
                    return 5
                }
                return 3
            }
            return (6*(blen-1-i) + offset - 1)/(2*offset - 1) + 1
        }
    }
    return 8
}



func weight(i, blen, offset int32) int32 {
    if i < 2*offset {
        if offset == 1 {
            if i == 0 {
                return 3
            }
            return 5
        }
        return 1 + (6*i + offset - 1)/(2*offset - 1)
    }
    if i > blen-1-2*offset {
        if offset == 1 {
            if blen-1-i == 0 {
                return 3
            }
            return 5
        }
        return 1 + (6*(blen-1-i) + offset - 1)/(2*offset - 1)
    }
    return 8
}



func weight(i int32, blen int32, offset int32) int32 {
    switch {
    case i < 2*offset:
        switch offset {
        case 1:
            switch i {
            case 0:
                return 3
            default:
                return 5
            }
        default:
            return 1 + (6*i + offset - 1)/(2*offset - 1)
        }
    case i > blen-1-2*offset:
        switch offset {
        case 1:
            switch blen-1-i {
            case 0:
                return 3
            default:
                return 5
            }
        default:
            return 1 + (6*(blen-1-i) + offset - 1)/(2*offset - 1)
        }
    default:
        return 8
    }
}



func weight(i int32, blen int32, offset int32) int32 {
    if i < 2*offset {
        if offset == 1 {
            if i == 0 {
                return 3
            } else {
                return 5
            }
        } else {
            return 1 + (6*i + offset - 1)/(2*offset - 1)
        }
    } else if i > blen-1-2*offset {
        if offset == 1 {
            if blen-1-i == 0 {
                return 3
            } else {
                return 5
            }
        } else {
            return 1 + (6*(blen-1-i) + offset - 1)/(2*offset - 1)
        }
    } else {
        return 8
    }
}
