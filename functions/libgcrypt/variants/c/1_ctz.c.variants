
static int ctz(uint64_t in)
{
 int r = 0;
 while ((in >> r) & 1 == 0 && r < 64) r++;
 return r;
}

static int ctz(uint64_t in)
{
 if (in == 0) return 64;
 int r = 0;
 for (; (in & 1) == 0; in >>= 1) r++;
 return r;
}

static int ctz(uint64_t in)
{
 int r = 0;
 for (int i = 0; i < 64; i++)
 {
  if ((in & (1ULL << i)) != 0)
   return r;
  r++;
 }
 return r;
}

static int ctz(uint64_t in)
{
 int r = 0;
 uint64_t mask = 1;
 while ((in & mask) == 0 && r < 64)
 {
  mask <<= 1;
  r++;
 }
 return r;
}

static int ctz(uint64_t in)
{
 int r = 0;
 if (in == 0) return 64;
 for (uint64_t m = 1; (in & m) == 0; m <<= 1) r++;
 return r;
}

static int ctz(uint64_t in)
{
 int r = 0;
 for (uint64_t m = 1; m != 0; m <<= 1, r++)
 {
  if ((in & m) != 0)
   break;
 }
 return r;
}

static int ctz(uint64_t in)
{
 if (in == 0) return 64;
 int r = 0;
 while ((in & (1ULL << r)) == 0)
 {
  r++;
 }
 return r;
}

static int ctz(uint64_t in)
{
 int r = 0;
 uint64_t m = 1;
 while (r < 64)
 {
  if ((in & m) != 0)
   break;
  m <<= 1;
  r++;
 }
 return r;
}

static int ctz(uint64_t in)
{
 int r = 64;
 for (int i = 0; i < 64; ++i)
 {
  if ((in & ((uint64_t)1 << i)) != 0)
  {
   r = i;
   break;
  }
 }
 return r;
}

static int ctz(uint64_t in)
{
 if (in == 0) return 64;
 int r = 0;
 while ((in & 1) == 0)
 {
  in >>= 1;
  r++;
 }
 return r;
}
