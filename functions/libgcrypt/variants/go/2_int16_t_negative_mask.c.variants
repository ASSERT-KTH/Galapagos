
import "math/bits"

func int16_t_negative_mask(x int16) int32 {
    return -(int32(x) >> 15)
}

func int16_t_negative_mask(x int16) int32 {
    return -int32((uint16(x) & 0x8000) >> 15)
}

func int16_t_negative_mask(x int16) int32 {
    return -int32(bits.RotateLeft16(uint16(x), -15) & 1)
}

func int16_t_negative_mask(x int16) int32 {
    return -int32((uint16(x) >> 14) >> 1)
}

func int16_t_negative_mask(x int16) int32 {
    return int32(-(int16(uint16(x) << 1) >> 16))
}

func int16_t_negative_mask(x int16) int32 {
    return int32(-int16(uint16(x) >> 15))
}

func int16_t_negative_mask(x int16) int32 {
    return -int32(uint16(x) >> 15)
}

func int16_t_negative_mask(x int16) int32 {
    return -int32((uint32(x) >> 15) & 1)
}

func int16_t_negative_mask(x int16) int32 {
    return -(x >> 15)
}

func int16_t_negative_mask(x int16) int32 {
    return int32(-(uint16(x) >> 15))
}
