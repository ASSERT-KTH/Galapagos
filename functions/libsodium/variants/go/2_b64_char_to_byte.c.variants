
package main

func b64CharToByte(c int32) uint32 {
	const x = ((((((uint32(c) - uint32('A')) >> 8) & 0xFF) ^ 0xFF) & (((((uint32('Z') - uint32(c)) >> 8) & 0xFF) ^ 0xFF) & (c - 'A'))) |
		(((((uint32(c) - uint32('a')) >> 8) & 0xFF) ^ 0xFF) & (((((uint32('z') - uint32(c)) >> 8) & 0xFF) ^ 0xFF) & (c - ('a' - 26)))) |
		(((((uint32(c) - uint32('0')) >> 8) & 0xFF) ^ 0xFF) & (((((uint32('9') - uint32(c)) >> 8) & 0xFF) ^ 0xFF) & (c - ('0' - 52))) |
		(((0 - (uint32(c) ^ uint32('+'))) >> 8) & 0xFF) ^ 0xFF) & 62) |
		(((0 - (uint32(c) ^ uint32('/'))) >> 8) & 0xFF) ^ 0xFF) & 63)
	return x | (((((0 - (uint32(x) ^ uint32(0))) >> 8) & 0xFF) ^ 0xFF) & (((((0 - (uint32(c) ^ uint32('A'))) >> 8) & 0xFF) ^ 0xFF) ^ 0xFF))
}

func b64CharToByte(c int32) uint32 {
	if c >= 'A' && c <= 'Z' {
		return uint32(c - 'A')
	}
	if c >= 'a' && c <= 'z' {
		return uint32(c - 'a' + 26)
	}
	if c >= '0' && c <= '9' {
		return uint32(c - '0' + 52)
	}
	if c == '+' {
		return 62
	}
	if c == '/' {
		return 63
	}
	return 0
}

func b64CharToByte(c int32) uint32 {
	switch {
	case c >= 'A' && c <= 'Z':
		return uint32(c - 'A')
	case c >= 'a' && c <= 'z':
		return uint32(c - 'a' + 26)
	case c >= '0' && c <= '9':
		return uint32(c - '0' + 52)
	case c == '+':
		return 62
	case c == '/':
		return 63
	default:
		return 0
	}
}

func b64CharToByte(c int32) uint32 {
	if 'A' <= c && c <= 'Z' {
		return uint32(c - 'A')
	}
	if 'a' <= c && c <= 'z' {
		return uint32(c - 'a' + 26)
	}
	if '0' <= c && c <= '9' {
		return uint32(c - '0' + 52)
	}
	if c == '+' {
		return 62
	}
	if c == '/' {
		return 63
	}
	return 0
}

func b64CharToByte(c int32) uint32 {
	if c >= 'A' && c <= 'Z' {
		return uint32(c - 'A')
	}
	if c >= 'a' && c <= 'z' {
		return uint32(c - 'a' + 26)
	}
	if c >= '0' && c <= '9' {
		return uint32(c - '0' + 52)
	}
	if c == '+' {
		return 62
	} else if c == '/' {
		return 63
	}
	return 0
}

func b64CharToByte(c int32) uint32 {
	if c >= 'A' && c <= 'Z' {
		return uint32(c - 'A')
	}
	if c >= 'a' && c <= 'z' {
		return uint32(c - 'a' + 26)
	}
	if c >= '0' && c <= '9' {
		return uint32(c - '0' + 52)
	}
	if c == '+' {
		return 62
	}
	if c == '/' {
		return 63
	}
	return 0
}

func b64CharToByte(c int32) uint32 {
	if c >= 'A' && c <= 'Z' {
		return uint32(c - 'A')
	} else if c >= 'a' && c <= 'z' {
		return uint32(c - 'a' + 26)
	} else if c >= '0' && c <= '9' {
		return uint32(c - '0' + 52)
	} else if c == '+' {
		return 62
	} else if c == '/' {
		return 63
	}
	return 0
}

func b64CharToByte(c int32) uint32 {
	switch c {
	case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
		return uint32(c - 'A')
	case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':
		return uint32(c - 'a' + 26)
	case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
		return uint32(c - '0' + 52)
	case '+':
		return 62
	case '/':
		return 63
	default:
		return 0
	}
}

func b64CharToByte(c int32) uint32 {
	const (
		UpperA      = 'A'
		UpperZ      = 'Z'
		LowerA      = 'a'
		LowerZ      = 'z'
		Num0        = '0'
		Num9        = '9'
		PlusSign    = '+'
		Slash       = '/'
		Base64Plus  = 62
		Base64Slash = 63
	)

	switch {
	case UpperA <= c && c <= UpperZ:
		return uint32(c - UpperA)
	case LowerA <= c && c <= LowerZ:
		return uint32(c - LowerA + 26)
	case Num0 <= c && c <= Num9:
		return uint32(c - Num0 + 52)
	case c == PlusSign:
		return Base64Plus
	case c == Slash:
		return Base64Slash
	default:
		return 0
	}
}

func b64CharToByte(c int32) uint32 {
	if c >= 65 && c <= 90 {
		return uint32(c - 65)
	}
	if c >= 97 && c <= 122 {
		return uint32(c - 97 + 26)
	}
	if c >= 48 && c <= 57 {
		return uint32(c - 48 + 52)
	}
	if c == 43 {
		return 62
	}
	if c == 47 {
		return 63
	}
	return 0
}
