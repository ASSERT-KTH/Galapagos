
static unsigned int b64_char_to_byte(int c)
{
    if ('A' <= c && c <= 'Z') return c - 'A';
    if ('a' <= c && c <= 'z') return c - 'a' + 26;
    if ('0' <= c && c <= '9') return c - '0' + 52;
    if (c == '+') return 62;
    if (c == '/') return 63;
    return 0;
}

static unsigned int b64_char_to_byte(int c)
{
    return ('A' <= c && c <= 'Z') ? c - 'A' :
           ('a' <= c && c <= 'z') ? c - 'a' + 26 :
           ('0' <= c && c <= '9') ? c - '0' + 52 :
           (c == '+') ? 62 :
           (c == '/') ? 63 :
           0;
}

static unsigned int b64_char_to_byte(int c)
{
    switch (c) {
        case '+': return 62;
        case '/': return 63;
        default:
            if (c >= 'A' && c <= 'Z') return c - 'A';
            if (c >= 'a' && c <= 'z') return c - 'a' + 26;
            if (c >= '0' && c <= '9') return c - '0' + 52;
            return 0;
    }
}

static unsigned int b64_char_to_byte(int c)
{
    if (c >= 'A' && c <= 'Z') return c - 'A';
    if (c >= 'a' && c <= 'z') return c - 'a' + 26;
    if (c >= '0' && c <= '9') return c - '0' + 52;
    if (c == '+') return 62;
    if (c == '/') return 63;
    return 0;
}

static unsigned int b64_char_to_byte(int c)
{
    static const unsigned int lookup[256] = {
        ['A'] = 0, ['B'] = 1, ['C'] = 2, ['D'] = 3, ['E'] = 4, ['F'] = 5, ['G'] = 6, 
        ['H'] = 7, ['I'] = 8, ['J'] = 9, ['K'] = 10, ['L'] = 11, ['M'] = 12, ['N'] = 13, 
        ['O'] = 14, ['P'] = 15, ['Q'] = 16, ['R'] = 17, ['S'] = 18, ['T'] = 19, ['U'] = 20, 
        ['V'] = 21, ['W'] = 22, ['X'] = 23, ['Y'] = 24, ['Z'] = 25, ['a'] = 26, ['b'] = 27, 
        ['c'] = 28, ['d'] = 29, ['e'] = 30, ['f'] = 31, ['g'] = 32, ['h'] = 33, ['i'] = 34, 
        ['j'] = 35, ['k'] = 36, ['l'] = 37, ['m'] = 38, ['n'] = 39, ['o'] = 40, ['p'] = 41, 
        ['q'] = 42, ['r'] = 43, ['s'] = 44, ['t'] = 45, ['u'] = 46, ['v'] = 47, ['w'] = 48, 
        ['x'] = 49, ['y'] = 50, ['z'] = 51, ['0'] = 52, ['1'] = 53, ['2'] = 54, ['3'] = 55, 
        ['4'] = 56, ['5'] = 57, ['6'] = 58, ['7'] = 59, ['8'] = 60, ['9'] = 61, ['+'] = 62, ['/'] = 63
    };
    return lookup[c];
}

static unsigned int b64_char_to_byte(int c)
{
    return 
        (c >= 'A' && c <= 'Z') * (c - 'A') +
        (c >= 'a' && c <= 'z') * (c - 'a' + 26) + 
        (c >= '0' && c <= '9') * (c - '0' + 52) + 
        (c == '+') * 62 +
        (c == '/') * 63;
}

static unsigned int b64_char_to_byte(int c)
{
    if (c >= 'A' && c <= 'Z') return c - 'A';
    if (c >= 'a' && c <= 'z') return c - 'a' + 26;
    if (c >= '0' && c <= '9') return c - '0' + 52;
    if (c == '+') return 62;
    if (c == '/') return 63;
    return 0;
}

static unsigned int b64_char_to_byte(int c)
{
    static const unsigned int lookup[] = {
        ['+'] = 62, ['/'] = 63
    };
    
    if ('A' <= c && c <= 'Z') return c - 'A';
    if ('a' <= c && c <= 'z') return c - 'a' + 26;
    if ('0' <= c && c <= '9') return c - '0' + 52;
    if (c == '+' || c == '/') return lookup[c];
    return 0;
}

static unsigned int b64_char_to_byte(int c)
{
    static const char lookup[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (unsigned int i = 0; i < 64; i++) {
        if (lookup[i] == c) 
            return i;
    }
    return 0;
}

static unsigned int b64_char_to_byte(int c)
{
    return c >= 'A' && c <= 'Z' ? c - 'A' :
           c >= 'a' && c <= 'z' ? c - 'a' + 26 :
           c >= '0' && c <= '9' ? c - '0' + 52 :
           c == '+' ? 62 :
           c == '/' ? 63 : 0;
}
