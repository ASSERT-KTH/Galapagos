
static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    return x + y + 2 * (uint64_t)((uint32_t)x * (uint32_t)y);
}

static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    const uint64_t mask = UINT64_C(0xFFFFFFFF);
    return x + y + 2 * ((x & mask) * (y & mask));
}

static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    const uint32_t low_x = (uint32_t)x;
    const uint32_t low_y = (uint32_t)y;
    const uint64_t product = (uint64_t)low_x * low_y;
    return x + y + (product << 1);
}

static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    const uint64_t m = UINT64_C(0xFFFFFFFF);
    const uint64_t product = (x & m) * (y & m);
    return x + y + (product << 1);
}

static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    const uint64_t lower_x = x & UINT64_C(0xFFFFFFFF);
    const uint64_t lower_y = y & UINT64_C(0xFFFFFFFF);
    const uint64_t product = lower_x * lower_y;
    return x + y + (product << 1);
}

static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    const uint32_t x_low = (uint32_t)(x & UINT64_C(0xFFFFFFFF));
    const uint32_t y_low = (uint32_t)(y & UINT64_C(0xFFFFFFFF));
    const uint64_t prod = (uint64_t)x_low * y_low;
    return x + y + (prod << 1);
}

static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    uint64_t mask = UINT64_C(0xFFFFFFFF);
    uint64_t low_x = x & mask;
    uint64_t low_y = y & mask;
    uint64_t product = low_x * low_y;
    return x + y + 2 * product;
}

static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    uint64_t a = x & UINT64_C(0xFFFFFFFF);
    uint64_t b = y & UINT64_C(0xFFFFFFFF);
    uint64_t prod = a * b;
    return x + y + (prod << 1);
}

static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    uint32_t low_x = (uint32_t)(x & UINT64_C(0xFFFFFFFF));
    uint32_t low_y = (uint32_t)(y & UINT64_C(0xFFFFFFFF));
    uint64_t product = (uint64_t)low_x * low_y;
    return x + y + (product << 1);
}

static inline uint64_t fBlaMka(uint64_t x, uint64_t y)
{
    const uint64_t mask = UINT64_C(0xFFFFFFFF);
    const uint64_t product = (x & mask) * (y & mask);
    return x + y + 2 * product;
}
