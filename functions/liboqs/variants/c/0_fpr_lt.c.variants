
fpr_lt(fpr x, fpr y) {
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    if ((sx ^ sy) < 0) return sx < sy;
    if (sx >= 0) return sx < sy;
    return sx > sy;
}

fpr_lt(fpr x, fpr y) {
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    sy = sy & ~((sx ^ sy) >> 63);
    return ((sx - sy) >> 63) & 1;
}

fpr_lt(fpr x, fpr y) {
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    int sign_diff = (sx ^ sy) >> 63;
    int sx_neg = sx >> 63;
    int sy_neg = sy >> 63;
    return sign_diff ? sx_neg > sy_neg : sx < sy;
}

fpr_lt(fpr x, fpr y) {
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    int64_t diff = sx - sy;
    int64_t inverted_diff = sy - sx;
    return ((sx ^ sy) >> 63) ? sx < sy : ((sx >> 63) ? inverted_diff >> 63 : diff >> 63) & 1;
}

fpr_lt(fpr x, fpr y) {
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    if ((sx ^ sy) < 0) return sx < sy;
    return (sx >> 63) ? sy < sx : sx < sy;
}

fpr_lt(fpr x, fpr y) {
    int cc0, cc1;
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    sy &= ~((sx ^ sy) >> 63);

    cc0 = (int)(sx < sy);
    cc1 = (int)(sy < sx);
    return cc0 ^ ((cc0 ^ cc1) & (x < 0));
}

fpr_lt(fpr x, fpr y) {
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    int sign_x = sx >> 63;
    int sign_y = sy >> 63;
    int sign_diff = sign_x ^ sign_y;
    return sign_diff ? sign_x & 1 : sx < sy;
}

fpr_lt(fpr x, fpr y) {
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    int sign_diff = ((sx ^ sy) >> 63);
    return sign_diff ? sx < sy : (sx < sy);
}

fpr_lt(fpr x, fpr y) {
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    int sx_neg = sx >> 63;
    int sy_neg = sy >> 63;
    if ((sx ^ sy) < 0) return sx_neg & 1;
    return sx < sy;
}

fpr_lt(fpr x, fpr y) {
    int64_t sx = *(int64_t *)&x;
    int64_t sy = *(int64_t *)&y;
    return ((sx & 0x8000000000000000) != (sy & 0x8000000000000000)) ? sx < sy : sx < sy;
}
