
func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := (z * uint64(p0i) & uint64(0x7FFFFFFF)) * uint64(p)
    d := uint32((z + w) >> 31) - p
    d += p & -(d >> 31)
    return d
}

func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := ((z * uint64(p0i)) & 0x7FFFFFFF) * uint64(p)
    d := uint32((z + w) >> 31)
    if d >= p {
        d -= p
    }
    return d
}

func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := (z * uint64(p0i) & 0x7FFFFFFF) * uint64(p)
    d := uint32((z + w) >> 31)
    if d < p {
        return d
    }
    return d - p
}

func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := ((z * uint64(p0i)) & 0x7FFFFFFF) * uint64(p)
    d := uint32((z + w) >> 31)
    d = d - p
    if int32(d) < 0 {
        d += p
    }
    return d
}

func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := (z * uint64(p0i) & 0x7FFFFFFF) * uint64(p)
    d := uint32((z + w) >> 31)
    if d >= p {
        return d - p
    }
    return d
}

func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := (z * uint64(p0i) & uint64(0x7FFFFFFF)) * uint64(p)
    d := uint32((z + w) >> 31)
    if d < p {
        return d
    }
    return d - p
}

func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := (z * uint64(p0i) & 0x7FFFFFFF) * uint64(p)
    d := uint32((z + w) >> 31) - p
    if int32(d) < 0 {
        return d + p
    }
    return d
}

func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := (z * uint64(p0i) & 0x7FFFFFFF) * uint64(p)
    d := uint32((z + w) >> 31) - p
    if d < 0 {
        d += p
    }
    return d
}

func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := (z * uint64(p0i) & 0x7FFFFFFF) * uint64(p)
    d := uint32((z + w) >> 31)
    d -= p
    if int32(d) < 0 {
        d += p
    }
    return d
}

func modp_montymul(a, b, p, p0i uint32) uint32 {
    z := uint64(a) * uint64(b)
    w := (z * uint64(p0i) & uint64(0x7FFFFFFF)) * uint64(p)
    d := uint32((z + w) >> 31)
    if d >= p {
        d -= p
    }
    return d
}
