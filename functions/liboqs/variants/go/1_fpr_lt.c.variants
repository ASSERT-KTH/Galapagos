
func fpr_lt(x, y uint64) int32 {
    sx := int64(x)
    sy := int64(y)
    if sx < 0 && sy < 0 {
        return int32((sy - sx) >> 63 & 1)
    } else if sx < 0 || sy < 0 {
        return int32(sx >> 63 & 1)
    }
    return int32((sx - sy) >> 63 & 1)
}

func fpr_lt(x, y uint64) int32 {
    if int64(x) < int64(y) {
        return 1
    }
    return 0
}

func fpr_lt(x, y uint64) int32 {
    sx := int64(x)
    sy := int64(y)
    if (sx^sy) < 0 {
        if sx < 0 {
            return 1
        }
        return 0
    }
    return int32((sx - sy) >> 63) & 1
}

func fpr_lt(x, y uint64) int32 {
    if (int64(x) & int64(y)) >= 0 {
        return int32((int64(x) - int64(y)) >> 63)
    }
    if int64(x) < 0 {
        return 1
    }
    return 0
}

func fpr_lt(x, y uint64) int32 {
    if (int64(x) >= 0 && int64(y) >= 0) || (int64(x) < 0 && int64(y) < 0) {
        return int32((int64(x) - int64(y)) >> 63 & 1)
    }
    if int64(x) < 0 {
        return 1
    }
    return 0
}

func fpr_lt(x, y uint64) int32 {
    if (x >> 63 == y >> 63) {
        return int32((int64(x) - int64(y)) >> 63 & 1)
    }
    if x >> 63 == 1 {
        return 1
    }
    return 0
}

func fpr_lt(x, y uint64) int32 {
    sx := int64(x)
    sy := int64(y)
    if ((sx ^ sy) >> 63) != 0 {
        return int32((sx >> 63) & 1)
    }
    return int32((sx - sy) >> 63 & 1)
}

func fpr_lt(x, y uint64) int32 {
    sx := int64(x)
    sy := int64(y)
    sign_x := sx >> 63
    sign_y := sy >> 63
    if sign_x != sign_y {
        return int32(sign_x & 1)
    }
    return int32((sx - sy) >> 63 & 1)
}

func fpr_lt(x, y uint64) int32 {
    sx := int64(x)
    sy := int64(y)
    sign_diff := (sx ^ sy) >> 63
    sy &= ^sign_diff
    cc0 := (sx - sy) >> 63 & 1
    cc1 := (sy - sx) >> 63 & 1
    return int32(cc0 ^ (cc0 ^ cc1) & ((x & y) >> 63 & 1))
}

func fpr_lt(x, y uint64) int32 {
    if (x < (1 << 63)) == (y < (1 << 63)) {
        return int32((int64(x) - int64(y)) >> 63 & 1)
    } else if x < (1 << 63) {
        return 0
    }
    return 1
}
